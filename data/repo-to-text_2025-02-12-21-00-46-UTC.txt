Directory: wordpress-to-customgpt

Directory Structure:
```
.
.
‚îú‚îÄ‚îÄ ./.git
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/HEAD
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/config
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/description
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/applypatch-msg.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/commit-msg.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/fsmonitor-watchman.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/post-update.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/pre-applypatch.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/pre-commit.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/pre-merge-commit.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/pre-push.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/pre-rebase.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/pre-receive.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/prepare-commit-msg.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/hooks/push-to-checkout.sample
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./.git/hooks/update.sample
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/index
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/info
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./.git/info/exclude
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/logs
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/logs/HEAD
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./.git/logs/refs/heads
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./.git/logs/refs/heads/main
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ ./.git/logs/refs/remotes/origin
‚îÇ¬†¬† ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ ./.git/logs/refs/remotes/origin/HEAD
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./.git/objects/pack
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./.git/objects/pack/pack-8e01c8baabeaa1f325f80185018206c538c7736d.idx
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ ./.git/objects/pack/pack-8e01c8baabeaa1f325f80185018206c538c7736d.pack
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./.git/packed-refs
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./.git/refs/heads
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./.git/refs/heads/main
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./.git/refs/remotes/origin
‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ ./.git/refs/remotes/origin/HEAD
‚îú‚îÄ‚îÄ ./DOCKER.md
‚îú‚îÄ‚îÄ ./Dockerfile
‚îú‚îÄ‚îÄ ./README.md
‚îú‚îÄ‚îÄ ./app.py
‚îú‚îÄ‚îÄ ./heroku.yml
‚îú‚îÄ‚îÄ ./requirements.txt
‚îî‚îÄ‚îÄ ./screenshot.png
```

Contents of DOCKER.md:
```
# Docker Guide for wordpress-to-customgpt

This guide provides instructions on how to build and run the Docker container for the wordpress-to-customgpt project locally, as well as how to deploy it to Heroku.

## Prerequisites

- Docker installed on your local machine
- Heroku CLI installed (optional: for Heroku deployment)
- Git installed

## Building and Running Locally

1. Clone the repository:
   ```
   git clone https://github.com/your-username/wordpress-to-customgpt.git
   cd wordpress-to-customgpt
   ```

2. Build the Docker image:
   ```
   docker build -t wordpress-to-customgpt .
   ```

3. Run the container locally:
   ```
   docker run -p 8501:8501 -v $(pwd):/app wordpress-to-customgpt streamlit run app.py
   ```

4. Open your browser and navigate to `http://localhost:8501` to access the Streamlit app.

## Deploying to Heroku

### Option 1: Heroku Git Deployment

1. Login to Heroku CLI:
   ```
   heroku login
   ```

2. Create a new Heroku app:
   ```
   heroku create your-app-name
   ```

3. Set the stack to container:
   ```
   heroku stack:set container
   ```

4. Push to Heroku:
   ```
   git push heroku main
   ```

5. Open the app in your browser:
   ```
   heroku open
   ```

### Option 2: Heroku Container Registry

1. Login to Heroku Container Registry:
   ```
   heroku container:login
   ```

2. Create a new Heroku app (if not already created):
   ```
   heroku create your-app-name
   ```

3. Build and push the Docker image to Heroku:
   ```
   heroku container:push web -a your-app-name
   ```

4. Release the container:
   ```
   heroku container:release web -a your-app-name
   ```

5. Open the app in your browser:
   ```
   heroku open -a your-app-name
   ```

## Troubleshooting

- If you encounter any issues with port binding on Heroku, make sure your `app.py` is using the `$PORT` environment variable:

  ```python
  import os
  port = int(os.environ.get("PORT", 8501))
  st.run(app, port=port)
  ```

- If your app is crashing on Heroku, check the logs:
  ```
  heroku logs --tail -a your-app-name
  ```

## Additional Notes

- Remember to update your `requirements.txt` file if you add any new dependencies to your project.
- You may need to configure environment variables in Heroku for any sensitive information (like API keys) that your app requires. You can do this through the Heroku Dashboard or using the Heroku CLI:
  ```
  heroku config:set VARIABLE_NAME=value -a your-app-name
  ```

For more information on deploying Streamlit apps to Heroku, refer to the [Streamlit documentation](https://docs.streamlit.io/knowledge-base/tutorials/deploy/docker) and [Heroku documentation](https://devcenter.heroku.com/categories/deploying-with-docker).

```

Contents of Dockerfile:
```
# Use an official Python runtime as the base image
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt .

# Install the required packages
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . .

# Make port 8501 available to the world outside this container
EXPOSE 8501

# Create a non-root user and switch to it
RUN useradd -m myuser
USER myuser

# Run the Streamlit app when the container launches
CMD streamlit run app.py --server.port 8501

```

Contents of README.md:
```
# WordPress Private Content to CustomGPT AI Agent Builder

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.7+](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/)
[![Streamlit](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://wordpress-to-customgpt.streamlit.app/)

A powerful and user-friendly tool to securely sync your private WordPress content to CustomGPT, enabling you to build AI agents with your private/paywalled data.

## How To Use It?
We provide an easy to use [no-code hosted Streamlit app](https://wordpress-to-customgpt.streamlit.app/). You can also self host the streamlit app if you'd like.

## Table of Contents
- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Usage](#usage)
- [Configuration](#configuration)
- [Contributing](#contributing)
- [License](#license)
- [Support](#support)

## Demo Video

[![Watch the video](https://cdn.loom.com/sessions/thumbnails/077b0015d55648c09e67a1c5d78949a1-a3297ef6a7792907-full-play.gif)](https://www.loom.com/share/077b0015d55648c09e67a1c5d78949a1?sid=59fd73cb-2e6a-41bb-9b33-85a2e3ade336)

[Click here to watch the full demo video](https://www.loom.com/share/077b0015d55648c09e67a1c5d78949a1?sid=59fd73cb-2e6a-41bb-9b33-85a2e3ade336)

## Features

- üîí Secure sync of private WordPress content to CustomGPT
- üîÑ Support for both posts and pages
- üìä Build AI agents from private, paywalled and logged-in data. 
- üöÄ Detailed citations and sources (for driving subscriptions and accessing paywalled data)
- ‚úÖ Indexing status check and confirmation

![Project Screenshot](screenshot.png)

## Prerequisites

Before you begin, ensure you have met the following requirements:

- Python 3.7 or higher
- A WordPress website with a read-only user with access to private/paywalled content. 
- A CustomGPT account with API access

## Installation

1. Clone the repository:
   ```
   git clone https://github.com/adorosario/wordpress-to-customgpt.git
   cd wordpress-to-customgpt
   ```

2. Install the required dependencies:
   ```
   pip install -r requirements.txt
   ```

## Usage

1. Run the Streamlit app:
   ```
   streamlit run app.py
   ```

2. Open your web browser and navigate to the provided local URL (usually `http://localhost:8501`).

3. Fill in the required fields:
   - WordPress Website URL
   - WordPress Username
   - WordPress Application Password
   - CustomGPT API Key

4. Click "Fetch and Transfer Data" to start the process.

5. Monitor the progress and wait for the confirmation of successful transfer and indexing.

## Configuration

### WordPress Setup

1. Log in to your WordPress admin panel.
2. Navigate to Users > Your Profile.
3. Scroll down to the Application Passwords section.
4. Enter a name for the application password (e.g., "CustomGPT Transfer") and click "Add New Application Password".  [Need Help?](https://make.wordpress.org/core/2020/11/05/application-passwords-integration-guide/)
5. Copy the generated password - you'll need this for the "WordPress Application Password" field in the app.

### CustomGPT Setup

1. Log in to your [CustomGPT account](https://app.customgpt.ai/).
2. Navigate to your profile settings.
3. Find your API key in the [API section](https://app.customgpt.ai/profile#api).
4. Use this API key in the "CustomGPT API Key" field in the app.

## Contributing

Contributions to the WordPress to CustomGPT Data Transfer project are welcome! Here's how you can contribute:

1. Fork the repository.
2. Create a new branch: `git checkout -b feature-branch-name`.
3. Make your changes and commit them: `git commit -m 'Add some feature'`.
4. Push to the branch: `git push origin feature-branch-name`.
5. Create a pull request.

## License

This project is licensed under the [MIT License](https://opensource.org/licenses/MIT).

## Support

If you encounter any problems or have any questions, please open an issue in the GitHub repository or contact the maintainers directly.

---

Made with ‚ù§Ô∏è by [adorosario](https://github.com/adorosario)
```

Contents of app.py:
```
import streamlit as st
import requests
from requests.auth import HTTPBasicAuth
import pandas as pd
from customgpt_client import CustomGPT
from customgpt_client.types import File
from requests.exceptions import HTTPError
from urllib.parse import urlparse
import time
import re
from datetime import datetime

def get_wordpress_data(api_url, username, app_password, content_type, num_docs):
    auth = HTTPBasicAuth(username, app_password)
    endpoint = f"{api_url}/wp-json/wp/v2/{content_type}"
    all_items = []
    page = 1
    per_page = 100  # Maximum allowed by WordPress API

    while len(all_items) < num_docs:
        params = {
            "per_page": min(per_page, num_docs - len(all_items)),
            "page": page,
            "status": "publish",
            "_embed": "true"  # This will include featured media in the response
        }
        
        response = requests.get(endpoint, auth=auth, params=params)
        
        if response.status_code == 200:
            items = response.json()
            all_items.extend(items)
            if len(items) < params["per_page"]:  # No more items to fetch
                break
            page += 1
        else:
            st.error(f"Error fetching data: {response.status_code}")
            return None

    return all_items[:num_docs]  # Ensure we don't return more than num_docs

def get_featured_media_url(item):
    if "_embedded" in item and "wp:featuredmedia" in item["_embedded"]:
        media = item["_embedded"]["wp:featuredmedia"]
        if media and len(media) > 0 and "source_url" in media[0]:
            return media[0]["source_url"]
    return None

def get_content_size(content):
    return len(content)

def create_short_description(content):
    # Remove HTML tags
    text = re.sub('<[^<]+?>', '', content)
    # Remove extra whitespace
    text = ' '.join(text.split())
    # Truncate to 160 characters
    return text[:157] + '...' if len(text) > 160 else text

def transfer_to_customgpt(project_name, docs, api_key):
    CustomGPT.api_key = api_key
    
    project = CustomGPT.Project.create(project_name=project_name)
    if project.status_code != 201:
        st.error(f"Failed to create project. Status code: {project.status_code}")
        return None
    
    project_id = project.parsed.data.id
    
    for idx, doc in enumerate(docs):
        file_name = f"document_{idx}.doc"
        file_content = doc["content"]
        file_metadata = {
            "source": doc["link"],
            "title": doc["title"],
            "description": doc["short_description"],
            "image": doc["featured_media"]
        }
        file_obj = File(file_name=file_name, payload=file_content)
        
        add_source = CustomGPT.Source.create(project_id=project_id, file=file_obj)
        if add_source.status_code != 201:
            st.error(f"Failed to upload file {file_name}. Status code: {add_source.status_code}")
            continue
        
        page_id = add_source.parsed.data.pages[0].id
        update_metadata = CustomGPT.PageMetadata.update(
            project_id, 
            page_id, 
            url=file_metadata["source"],
            title=file_metadata["title"],
            description=file_metadata["description"],
            image=file_metadata["image"]
        )
        if update_metadata.status_code != 200:
            st.error(f"Failed to update metadata for {file_name}. Status code: {update_metadata.status_code}")
    
    st.success(f"Data transferred to CustomGPT project: {project_name}")
    return project_id

def check_indexing_status(project_id, api_key):
    CustomGPT.api_key = api_key
    page_n = 1 # Pagination
    all_documents_indexed = False
    
    while not all_documents_indexed:
        documents_response = CustomGPT.Page.get(project_id=project_id, page=page_n)
        if documents_response.status_code != 200:
            st.error(f"Failed to retrieve documents. Status code: {documents_response.status_code}")
            return False
        
        documents_data = documents_response.parsed.data.pages
        documents = documents_data.data
        
        page_n_completed = True
        for doc in documents:
            # st.text(f"{doc.filename}: {doc.index_status}")
            if doc.index_status == "queued":
                time.sleep(5)
                page_n_completed = False
                break
        
        # At this point, all documents found in paginated responses until page_n have been indexed
        if page_n_completed:
            if documents_data.next_page_url:
                page_n += 1
            else:
                all_documents_indexed = True 
    
    st.success("All documents indexed successfully!")
    return True

def generate_project_name(wp_url):
    # Extract domain name from the URL
    domain = urlparse(wp_url).netloc
    
    # Remove 'www.' if present
    domain = re.sub(r'^www\.', '', domain)
    
    # Generate timestamp
    timestamp = datetime.now().strftime("%Y%m%d:%H%M%S")
    
    # Combine domain and timestamp
    project_name = f"{domain} - {timestamp}"
    
    return project_name

st.set_page_config(page_title="WordPress Private Content to CustomGPT AI Agent Builder", layout="wide")

st.title("WordPress Private Content to CustomGPT AI Agent Builder")
st.markdown("*Securely sync your WordPress content to CustomGPT to build your AI agent*. [Github](https://github.com/adorosario/wordpress-to-customgpt)")
st.markdown("---")

# WordPress inputs
# Source Section
st.header("Source: WordPress")
col1, col2, col3 = st.columns(3)

with col1:
    wp_url = st.text_input(
        "WordPress Website URL",
        help="Enter the full URL of your WordPress website (e.g., https://www.example.com)"
    )

with col2:
    wp_username = st.text_input(
        "WordPress Username",
        help="Enter your WordPress username with sufficient permissions to access private content."
    )

with col3:
    wp_app_password = st.text_input(
        "WordPress Application Password",
        type="password",
        help="Enter your WordPress application password. This is different from your login password. Generate it in WordPress under Users > Application Passwords. [See Guide](https://make.wordpress.org/core/2020/11/05/application-passwords-integration-guide/)"
    )

# Checkboxes for content types
fetch_posts = True
fetch_pages = True

# Uncomment this if you want to control what is sync'ed
# col1, col2 = st.columns(2)
# with col1:
#     fetch_posts = st.checkbox("Fetch Posts", value=True)
# with col2:
#     fetch_pages = st.checkbox("Fetch Pages", value=True)

# Configure this based on on your CustomGPT plan limits (Standard plan is 1000)
num_docs = 1000

# Uncomment this if you want to have the user input his limits
# st.number_input("Number of documents", min_value=1, value=1000)

# Destination Section
st.header("Destination: CustomGPT")
customgpt_api_key = st.text_input(
    "CustomGPT API Key",
    type="password",
    help="Enter your [CustomGPT API key](https://app.customgpt.ai/profile#api). You can find this in your CustomGPT account settings."
)
customgpt_project_name = generate_project_name(wp_url)

# Action Button
if st.button("Fetch and Transfer Data", help="Click to start the data transfer process"):
    if not wp_url or not wp_username or not wp_app_password or not customgpt_api_key:
        st.error("Please fill in all required fields before proceeding.")
    else:
        all_data = []
        total_content_size = 0
        
        content_types = []
        if fetch_posts:
            content_types.append("posts")
        if fetch_pages:
            content_types.append("pages")
        
        for content_type in content_types:
            data = get_wordpress_data(wp_url, wp_username, wp_app_password, content_type, num_docs)
            
            if data:
                for item in data:
                    content = item["content"]["rendered"]
                    content_size = get_content_size(content)

                    # Skip items with zero content size
                    if content_size == 0:
                        continue

                    total_content_size += content_size
                    all_data.append({
                        "title": item["title"]["rendered"],
                        "link": item["link"],
                        "content": content,
                        "short_description": create_short_description(content),
                        "featured_media": get_featured_media_url(item),
                        "type": content_type,
                        "content_size": content_size
                    })
        
        if all_data:
            df = pd.DataFrame(all_data)
            st.table(df[["title", "link", "type", "content_size"]])
            
            total_documents = len(all_data)
            
            st.info(f"Beginning sync of {total_documents} documents to CustomGPT ...")
            project_id = transfer_to_customgpt(customgpt_project_name, all_data, customgpt_api_key)
            if project_id:
                st.info("Checking indexing status...")
                indexing_successful = check_indexing_status(project_id, customgpt_api_key)
                if indexing_successful:
                    st.markdown(f"""
                    ### :tada: Data Successfully Synced!
                    
                    Your WordPress content has been successfully synced to CustomGPT and indexed.
                    
                    You can now [query](https://app.customgpt.ai/projects/{project_id}/ask-me-anything) your [data](https://app.customgpt.ai/projects/{project_id}/data/pages) and [deploy your AI agent](https://app.customgpt.ai/projects/{project_id}/sharing-settings) to your Wordpress website:
                    
                    **[Open CustomGPT Dashboard](https://app.customgpt.ai/projects/{project_id}/ask-me-anything)**
                    """)
        else:
            st.warning("No data fetched. Please check your inputs and try again.")
```

Contents of heroku.yml:
```
build:
  docker:
    web: Dockerfile

```

Contents of requirements.txt:
```
streamlit
requests
pandas
python-dotenv
customgpt-client
```

Contents of screenshot.png:
```
[Could not decode file contents]

```

