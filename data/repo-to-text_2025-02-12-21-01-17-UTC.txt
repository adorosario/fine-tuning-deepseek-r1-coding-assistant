Directory: customgpt-cookbook

Directory Structure:
```
.
├── .gitignore
├── LICENSE
├── OpenAPI
│   ├── OpenAPI/README.md
│   └── OpenAPI/openapi.json
├── README.md
├── examples
│   ├── examples/Add_a_file_to_an_existing_project.ipynb
│   ├── examples/Add_a_sitemap_to_an_existing_project.ipynb
│   ├── examples/Create_Bot_By_File.ipynb
│   ├── examples/Create_Bot_By_Sitemap.ipynb
│   ├── examples/Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb
│   ├── examples/Delete_a_page_from_the_project.ipynb
│   ├── examples/Delete_a_project.ipynb
│   ├── examples/GetAndUpdatePageMetadata.ipynb
│   ├── examples/Get_Citation_File.ipynb
│   ├── examples/Get_Project_Stats.ipynb
│   ├── examples/Get_Settings_for_a_particular_project.ipynb
│   ├── examples/Get_citation_details.ipynb
│   ├── examples/List_all_pages_of_a_project.ipynb
│   ├── examples/List_all_projects_for_an_account_with_pagination.ipynb
│   ├── examples/Reindex_page_of_a_project.ipynb
│   ├── examples/Retrieve_messages_for_a_conversation.ipynb
│   ├── examples/SDK_Add_a_FIle_to_project.ipynb
│   ├── examples/SDK_Add_a_Sitemap_to_project.ipynb
│   ├── examples/SDK_Create_Bot_By_Sitemap.ipynb
│   ├── examples/SDK_Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb
│   ├── examples/SDK_Create_bot_from_file.ipynb
│   ├── examples/SDK_Delete_a_project.ipynb
│   ├── examples/SDK_Delete_a_project_page.ipynb
│   ├── examples/SDK_GetPageMetadata.ipynb
│   ├── examples/SDK_Get_Citation_Details.ipynb
│   ├── examples/SDK_Get_Project_Stats.ipynb
│   ├── examples/SDK_Get_settings_for_a_particular_project.ipynb
│   ├── examples/SDK_List_all_pages_belonging_to_a_project.ipynb
│   ├── examples/SDK_List_all_projects_using_pagination.ipynb
│   ├── examples/SDK_Reindex_page_belonging_to_a_project.ipynb
│   ├── examples/SDK_Retrieve_Messages_of_conversation.ipynb
│   ├── examples/SDK_Update_Delete_a_conversation.ipynb
│   ├── examples/SDK_Update_a_project_name.ipynb
│   ├── examples/SDK_Update_project_settings.ipynb
│   ├── examples/SDK_Update_project_sharing_and_get_project_share_link,_embed_code_and_chat_js_code.ipynb
│   ├── examples/Update a project name.ipynb
│   ├── examples/Update_Delete_a_conversation.ipynb
│   ├── examples/Update_project_sharing_and_get_project_share_link,_embed_code_and_chat_js_code.ipynb
│   └── examples/Update_settings_for_a_particular_project.ipynb
├── personas
│   ├── personas/README.md
│   └── personas/customgpt-ai-website-persona.md
├── requirements.txt
└── tests
    ├── tests/credentials.py
    ├── tests/file
    │   └── tests/file/vanka.pdf
    ├── tests/test_citations.py
    ├── tests/test_conversations.py
    ├── tests/test_page_metadata.py
    ├── tests/test_pages.py
    ├── tests/test_plugins.py
    ├── tests/test_project_settings.py
    ├── tests/test_projects.py
    ├── tests/test_sources.py
    └── tests/test_users.py
```

Contents of LICENSE:
```
MIT License

Copyright (c) 2023 Poll The People

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

```

Contents of README.md:
```
# customgpt-cookbook
Examples and guides for using the CustomGPT API

```

Contents of requirements.txt:
```
pytest
sseclient-py
requests
```

Contents of OpenAPI/README.md:
```
# CustomGPT's REST API OpenAPI Description

This repository contains [OpenAPI](https://www.openapis.org/) descriptions for [CustomGPT's REST API](https://docs.customgpt.ai/reference/i-api-homepage).

## What is OpenAPI?

From the [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification):

> The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service.

## Contributing

If you've identified a mismatch between the CustomGPT API's behavior and these descriptions, or found an issue with the format of a schema, [please open an issue.](https://github.com/Poll-The-People/customgpt-cookbook/issues/new?template=schema-inaccuracy.md)
```

Contents of OpenAPI/openapi.json:
```
{
    "openapi": "3.0.2",
    "info": {
        "title": "CustomGPT",
        "description": "API Documentation for CustomGPT.",
        "contact": {
            "name": "CustomGPT",
            "url": "https:\/\/app.customgpt.ai",
            "email": "hello@customgpt.ai"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https:\/\/app.customgpt.ai",
            "description": "API Version 1"
        }
    ],
    "paths": {
        "\/api\/v1\/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List all projects.",
                "description": "Returns a list of your projects. The projects are returned sorted by creation date, with the most recent projects appearing first. It is a paginated API and you can use the page parameter to fetch the next page of projects. The default page size is 10.\n\nHere is an example to list projects: using [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/List_all_projects_for_an_account_with_pagination.ipynb) and using our python [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_List_all_projects_using_pagination.ipynb).",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number to return",
                        "required": false,
                        "schema": {
                            "default": 1,
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The duration of the projects to list.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 90
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order of the projects to list. Defaults to desc.",
                        "required": false,
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc",
                            "type": "string"
                        }
                    },
                    {
                        "name": "width",
                        "in": "query",
                        "description": "The width of the embed code. Defaults to 100%.",
                        "required": false,
                        "schema": {
                            "default": "100%",
                            "type": "string",
                            "example": "50rem"
                        }
                    },
                    {
                        "name": "height",
                        "in": "query",
                        "description": "The height of the embed code. Defaults to 100%.",
                        "required": false,
                        "schema": {
                            "default": "auto",
                            "type": "string",
                            "example": "50rem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of projects that belong to the user.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "description": "The current page number",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#\/components\/schemas\/Project"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "description": "The first page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "from": {
                                                    "description": "The first item number of the current page",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "description": "The last page number",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page_url": {
                                                    "description": "The last page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "next_page_url": {
                                                    "description": "The next page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "path": {
                                                    "description": "The current page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "per_page": {
                                                    "description": "The number of items per page",
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "prev_page_url": {
                                                    "description": "The previous page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "to": {
                                                    "description": "The last item number of the current page",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "total": {
                                                    "description": "The total number of items",
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create a new project.",
                "description": "Create a new project by importing data either from a sitemap or an uploaded file. This endpoint enables you to initiate the creation of a new project by supplying the necessary project data that will be used as the context. You can choose to import the project structure and content from a sitemap url or upload a specific file format that contains the context can be any text, audio or video format. The system will process the provided data and generate a new project based on the imported or uploaded information.\nHere is an example to create a bot using a sitemap: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Create_Bot_By_Sitemap.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Create_Bot_By_Sitemap.ipynb).",
                "requestBody": {
                    "description": "Create a new project from a sitemap or a file",
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "project_name": {
                                        "description": "Project name",
                                        "type": "string",
                                        "example": "My project"
                                    },
                                    "sitemap_path": {
                                        "description": "The sitemap path",
                                        "type": "string",
                                        "example": "https:\/\/example.com\/sitemap.xml"
                                    },
                                    "file_data_retension": {
                                        "description": "File data retension",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "file": {
                                        "description": "The submitted file.",
                                        "format": "binary",
                                        "type": "string",
                                        "example": "file.pdf"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/ProjectCreatedResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/CreateProjectErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Show a certain project.",
                "description": "Retrieve details of a project based on its unique project ID. This endpoint allows you to fetch specific information about a project.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "width",
                        "in": "query",
                        "description": "The width of the embed code. Defaults to 100%.",
                        "required": false,
                        "schema": {
                            "default": "100%",
                            "type": "string",
                            "example": "50rem"
                        }
                    },
                    {
                        "name": "height",
                        "in": "query",
                        "description": "The height of the embed code. Defaults to 100%.",
                        "required": false,
                        "schema": {
                            "default": "auto",
                            "type": "string",
                            "example": "50rem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/ListProjectResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update a certain project.",
                "description": "Update a project with specific details based on its unique projectId. This endpoint allows you to modify and revise the information associated with a particular project\nHere is an example to a update a specific object: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Update%20a%20project%20name.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Update_a_project_name.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of a project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a project",
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "project_name": {
                                        "description": "Project name",
                                        "type": "string",
                                        "example": "My project"
                                    },
                                    "is_shared": {
                                        "description": "Whether the project is shared or not",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "sitemap_path": {
                                        "description": "Sitemap path",
                                        "type": "string",
                                        "example": "https:\/\/example.com\/sitemap.xml"
                                    },
                                    "file_data_retension": {
                                        "description": "File data retension",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "file": {
                                        "description": "File",
                                        "format": "binary",
                                        "type": "string",
                                        "example": "file.pdf"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/UpdateProjectResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete a certain project.",
                "description": "Delete a project by its unique project ID. This endpoint allows you to remove an existing project from the system based on its ID.\nHere is an example to delete a project: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Delete_a_project.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Delete_a_project.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of a project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/DeleteProjectResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/stats": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get the stats for a certain project.",
                "description": "Retrieve statistical data for a project using its unique projectId. This endpoint provides extensive statistics about the project's performance, activity, or other relevant metrics.\nHere is an example to a specific object stats: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Get_Project_Stats.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Get_Project_Stats.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of a project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/ProjectStatsResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/pages": {
            "get": {
                "tags": [
                    "Pages"
                ],
                "summary": "List all pages that belong to a project.",
                "description": "Retrieve a list of all pages associated with a project. This endpoint allows you to fetch project details and a collection of pages that belong to a specific project. Each page object includes information such as the page ID, URL, hash of the URL, project ID, crawl status, index status, file details (if applicable), creation and update timestamps, and other relevant attributes.\nHere is an example to list all pages belonging to project: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/List_all_pages_of_a_project.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_List_all_pages_belonging_to_a_project.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number to return",
                        "required": false,
                        "schema": {
                            "default": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The duration of the projects to list. Defaults to 90 days.",
                        "required": false,
                        "schema": {
                            "default": 90,
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order of the projects to list. Defaults to desc.",
                        "required": false,
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pages successfully retrieved.",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "project": {
                                                    "$ref": "#\/components\/schemas\/Project"
                                                },
                                                "pages": {
                                                    "type": "object",
                                                    "properties": {
                                                        "current_page": {
                                                            "description": "The current page number",
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "data": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#\/components\/schemas\/Page"
                                                            }
                                                        },
                                                        "first_page_url": {
                                                            "description": "The first page url",
                                                            "type": "string",
                                                            "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                        },
                                                        "from": {
                                                            "description": "The first item number of the current page",
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "last_page": {
                                                            "description": "The last page number",
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "last_page_url": {
                                                            "description": "The last page url",
                                                            "type": "string",
                                                            "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                        },
                                                        "next_page_url": {
                                                            "description": "The next page url",
                                                            "type": "string",
                                                            "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                        },
                                                        "path": {
                                                            "description": "The current page url",
                                                            "type": "string",
                                                            "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                        },
                                                        "per_page": {
                                                            "description": "The number of items per page",
                                                            "type": "integer",
                                                            "example": 10
                                                        },
                                                        "prev_page_url": {
                                                            "description": "The previous page url",
                                                            "type": "string",
                                                            "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                        },
                                                        "to": {
                                                            "description": "The last item number of the current page",
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "total": {
                                                            "description": "The total number of items",
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/pages\/{pageId}": {
            "delete": {
                "tags": [
                    "Pages"
                ],
                "summary": "Delete a certain page that belongs to a certain project.",
                "description": "Delete a specific page within a project based on its unique projectId and pageId. This endpoint allows you to remove a particular page from the project, permanently deleting its associated context.\nHere is an example to delete a certain page: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Delete_a_page_from_the_project.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Delete_a_project_page.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageId",
                        "in": "path",
                        "description": "The page id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/DeleteProjectResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/pages\/{pageId}\/reindex": {
            "post": {
                "tags": [
                    "Pages"
                ],
                "summary": "Reindex a certain page that belongs to a certain project.",
                "description": "Reindex a specific page within a project based on its unique projectId and pageId. This endpoint allows you to refresh a particular page from the project. Our system will crawl and index page content newly.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageId",
                        "in": "path",
                        "description": "The page id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page reindex process start successfully",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "updated": {
                                                    "description": "Whether the page start reindex process successfully or not",
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/PageReindexErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/settings": {
            "get": {
                "tags": [
                    "Project Settings"
                ],
                "summary": "Get project settings.",
                "description": "Retrieve the project settings for a specific project. This endpoint allows you to fetch the configuration and settings associated with the project.\nHere is an example to get a project settings: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Get_Settings_for_a_particular_project.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Get_settings_for_a_particular_project.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/ListProjectSettingsResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Project Settings"
                ],
                "summary": "Update project settings.",
                "description": "Update the project settings for a specific project. This endpoint allows you to update the configuration and settings associated with the project.\nHere is an example to get a project settings: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Update_settings_for_a_particular_project.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Update_project_settings.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update project settings",
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "properties": {
                                    "chat_bot_avatar": {
                                        "description": "Chatbot avatar",
                                        "format": "binary",
                                        "type": "string",
                                        "example": "avatar.png"
                                    },
                                    "chat_bot_bg": {
                                        "description": "Chatbot background",
                                        "format": "binary",
                                        "type": "string",
                                        "example": "bg.png"
                                    },
                                    "default_prompt": {
                                        "description": "Default prompt",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "How can I help you?"
                                    },
                                    "example_questions": {
                                        "description": "Example questions",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "How can I help you?"
                                        }
                                    },
                                    "response_source": {
                                        "description": "Response source",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "https:\/\/example.com"
                                    },
                                    "chatbot_msg_lang": {
                                        "description": "Chatbot message language",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "en"
                                    },
                                    "chatbot_color": {
                                        "description": "Chatbot color in hex format",
                                        "type": "string",
                                        "maxLength": 9,
                                        "example": "#000000"
                                    },
                                    "persona_instructions": {
                                        "description": "Role instructions for persona or null if persona must be delete",
                                        "type": "string",
                                        "nullable": true,
                                        "example": "You are a custom chatbot assistant called CustomGPT, a friendly lawyer who answers questions based on the given context."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/UpdateProjectSettingsResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/UpdateProjectSettingsErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/plugins": {
            "get": {
                "tags": [
                    "Project Plugins"
                ],
                "summary": "Show a certain project plugin.",
                "description": "Retrieve the plugin details associated with a project. This endpoint provides information about the project plugin.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project id.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/ListProjectPluginResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectPluginNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Project Plugins"
                ],
                "summary": "Create a plugin.",
                "description": "Create a new plugin for a specific project identified by its unique projectId. This endpoint enables you to create a custom plugin for the project. Which allows you to share the custom chatbot as openai plugin to be shared globally.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The id of a project in which plugin will be stored.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Create a project plugin",
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "model_name": {
                                        "description": "Model Name",
                                        "type": "string",
                                        "example": "IndoorPlants"
                                    },
                                    "human_name": {
                                        "description": "Name For Human",
                                        "type": "string",
                                        "example": "The Indoor Plants Channel"
                                    },
                                    "keywords": {
                                        "description": "Keywords For Model",
                                        "type": "string",
                                        "example": "Indoor plants, Gardening, Trusted information."
                                    },
                                    "description": {
                                        "description": "Description For Human",
                                        "type": "string",
                                        "example": "Trusted information about indoor plants and gardening."
                                    },
                                    "is_active": {
                                        "description": "Whether the project plugin is active or not",
                                        "default": false,
                                        "type": "boolean",
                                        "example": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/CreateProjectPluginResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Project Plugins"
                ],
                "summary": "Update a plugin.",
                "description": "Update the plugin configuration for a specific project identified by its unique projectId. This endpoint allows you to update the associated attributes of the plugin.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The id of a project in which plugin will be stored.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a project plugin",
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "model_name": {
                                        "description": "Model Name",
                                        "type": "string",
                                        "example": "IndoorPlants"
                                    },
                                    "human_name": {
                                        "description": "Name For Human",
                                        "type": "string",
                                        "example": "The Indoor Plants Channel"
                                    },
                                    "keywords": {
                                        "description": "Keywords For Model",
                                        "type": "string",
                                        "example": "Indoor plants, Gardening, Trusted information."
                                    },
                                    "description": {
                                        "description": "Description For Human",
                                        "type": "string",
                                        "example": "Trusted information about indoor plants and gardening."
                                    },
                                    "is_active": {
                                        "description": "Whether the project plugin is active or not",
                                        "default": false,
                                        "type": "boolean",
                                        "example": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/UpdateProjectPluginResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectPluginNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/conversations": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "List all conversations for a project.",
                "description": "Retrieve all conversations associated with a project based on its unique projectId. This endpoint allows you to fetch a collection of conversations related to a specific project.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The ID of the project to get the conversations for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number to return",
                        "required": false,
                        "schema": {
                            "default": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order to sort the results by",
                        "required": false,
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc",
                            "type": "string",
                            "example": "desc"
                        }
                    },
                    {
                        "name": "userFilter",
                        "in": "query",
                        "description": "Filter the results by the user that created the conversation",
                        "required": false,
                        "schema": {
                            "enum": [
                                "all",
                                "anonymous",
                                "team_member"
                            ],
                            "default": "all",
                            "type": "string",
                            "example": "all"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of conversations for a project",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "description": "The current page number",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#\/components\/schemas\/Conversation"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "description": "The first page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "from": {
                                                    "description": "The first item number of the current page",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "description": "The last page number",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page_url": {
                                                    "description": "The last page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "next_page_url": {
                                                    "description": "The next page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "path": {
                                                    "description": "The current page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "per_page": {
                                                    "description": "The number of items per page",
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "prev_page_url": {
                                                    "description": "The previous page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "to": {
                                                    "description": "The last item number of the current page",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "total": {
                                                    "description": "The total number of items",
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Create a new conversation.",
                "description": "Create a new conversation for a project identified by its unique projectId. This endpoint allows you to initiate a new conversation within a specific project. A conversation serves as a platform for users to exchange messages regarding project-related matters. By providing the projectId, you can establish a conversation within the context of the project allowing you to seamlessly communicate with it.\nHere is an example to create a conversation: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Create a new conversation",
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Conversation name",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "My conversation"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/CreateConversationResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/conversations\/{sessionId}": {
            "put": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Update a conversation.",
                "description": "Update a conversation within a project identified by its unique projectId and sessionId. This endpoint allows you to modify and update the properties of a specific conversation. By providing the projectId and sessionId, you can target the desired conversation and make changes to its attributes.\nHere is an example to update a conversation: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Update_Delete_a_conversation.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Update_Delete_a_conversation.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The unique session identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a conversation",
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The new name of the conversation",
                                        "type": "string",
                                        "example": "My new conversation name"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update conversation information",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#\/components\/schemas\/Conversation"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Delete a conversation.",
                "description": "Delete a conversation within a project identified by its unique projectId and sessionId. This endpoint allows you to remove a specific conversation from the project, permanently deleting all associated messages. By providing the projectId and sessionId, you can target the conversation to be deleted, ensuring the removal of all conversation-related data.\nHere is an example to delete a conversation: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Update_Delete_a_conversation.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Update_Delete_a_conversation.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique project identifier.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The unique session identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/DeleteProjectResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/conversations\/{sessionId}\/messages": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Retrieve messages that have been sent in a conversation.",
                "description": "Retrieve all messages sent within a conversation of a project identified by its unique projectId and sessionId. This endpoint allows you to retrieve a collection of messages exchanged in a specific conversation. Messages contain the content, timestamps, and other relevant information shared during the course of the conversation. By providing the projectId and sessionId, you can access all the messages associated with that particular conversation within the project context.\nHere is an example to retrieve messages of a conversation: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Retrieve_messages_for_a_conversation.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Retrieve_Messages_of_conversation.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The ID of the project to get the messages for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The session ID of the converstaions to get the messages for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "1"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number to return",
                        "required": false,
                        "schema": {
                            "default": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order to sort the results by",
                        "required": false,
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc",
                            "type": "string",
                            "example": "desc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/ConversationMessageListResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Send a message to a conversation.",
                "description": "Send a message to a conversation within a project identified by its unique projectId and sessionId. This endpoint enables you to send a new message to a specific conversation, facilitating seamless communication and collaboration within the project. By providing the projectId and sessionId, you can target the desired conversation and contribute to the ongoing discussion. This API endpoint supports real-time streaming, allowing for instant message delivery and dynamic updates which enables efficient and interactive communication between the user and chatbot.\nHere is an example to send a message to a conversation: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The ID of the project to get the messages for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The session ID of the converstaions to get the messages for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "1"
                        }
                    },
                    {
                        "name": "stream",
                        "in": "query",
                        "description": "Whether to stream the response or not, if stream the responses will be sent as data-only server-sent events as they become available, with the stream terminated by a `status: \"finish\"` message. [Example Python code](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb).",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "The language to use for the prompt",
                        "required": false,
                        "schema": {
                            "default": "en",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Send a message to a conversation.",
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "prompt": {
                                        "description": "Prompt to send to OpenAI",
                                        "type": "string",
                                        "example": "Write me hello world program in C"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/SendConversationResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/citations\/{citationId}": {
            "get": {
                "tags": [
                    "Citations"
                ],
                "summary": "Get the Open Graph data for a citation.",
                "description": "Retrieve the Open Graph data for a citation based on its unique identifier. This endpoint allows you to fetch the Open Graph metadata associated with a specific citation.\nHere is an example to get citation detail: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Get_citation_details.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Get_Citation_Details.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of the project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "citationId",
                        "in": "path",
                        "description": "The unique identifier of the citation.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the Open Graph data for a citation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#\/components\/schemas\/OpenGraphCache"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/sources": {
            "get": {
                "tags": [
                    "Sources"
                ],
                "summary": "List a certain project's sources.",
                "description": "Retrieve a list of all sources associated with a given project. This endpoint provides a collection of sources that are linked to a specific project. Sources serve as references or contexts for the project.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of a project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/ListProjectsResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Sources"
                ],
                "summary": "Create a new project source.",
                "description": "Create a new data source for a given project, allowing you to add additional context by specifying a sitemap URL or uploading a file. This endpoint enables you to enrich the project's information by incorporating relevant data sources.\nHere is an example to add a new source to project: [API](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/Add_a_sitemap_to_an_existing_project.ipynb) [SDK](https:\/\/github.com\/Poll-The-People\/customgpt-cookbook\/blob\/main\/examples\/SDK_Add_a_Sitemap_to_project.ipynb).",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of a project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Create a new project source from a sitemap or a file",
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sitemap_path": {
                                        "description": "The sitemap path",
                                        "type": "string",
                                        "example": "https:\/\/example.com\/sitemap.xml"
                                    },
                                    "file_data_retension": {
                                        "description": "File data retension",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "file": {
                                        "description": "The submitted file.",
                                        "format": "binary",
                                        "type": "string",
                                        "example": "file.pdf"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/CreateProjectSourceResponse"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/FlaskServiceErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/projects\/{projectId}\/sources\/{sourceId}": {
            "delete": {
                "tags": [
                    "Sources"
                ],
                "summary": "Delete a project source.",
                "description": "Delete a source for a given project.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The unique identifier of a project.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sourceId",
                        "in": "path",
                        "description": "The unique identifier of a source.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project source deleted successfully",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "deleted": {
                                                    "description": "Whether the project source was deleted successfully or not",
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ProjectNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/preview\/{id}": {
            "get": {
                "tags": [
                    "Pages"
                ],
                "summary": "Preview file from citation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "$ref": "#\/components\/responses\/BadArgumentErrorResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/PageNotFoundErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        },
        "\/api\/v1\/user": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Show the user's profile.",
                "description": "Retrieve the profile information of the current user. This endpoint allows you to fetch the details and attributes associated with the user's profile, providing valuable information about the user's account and preferences.",
                "responses": {
                    "200": {
                        "description": "Retrieve user account info",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#\/components\/schemas\/User"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Update the user's profile.",
                "description": "Update the profile of the current user. This endpoint allows the user to modify and update their profile information and preferences within the application or system.",
                "requestBody": {
                    "description": "Update user account info",
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "properties": {
                                    "profile_photo": {
                                        "description": "User profile photo",
                                        "format": "binary",
                                        "type": "string",
                                        "example": "avatar.png"
                                    },
                                    "name": {
                                        "description": "User name",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "John Doe"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update user account info",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "description": "The status of the response",
                                            "enum": [
                                                "error",
                                                "success"
                                            ],
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#\/components\/schemas\/User"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/ApiTokenValidationErrorResponse"
                    },
                    "500": {
                        "$ref": "#\/components\/responses\/InternalServerErrorResponse"
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ProjectSettings": {
                "type": "object",
                "properties": {
                    "chatbot_avatar": {
                        "description": "The chatbot avatar",
                        "type": "string",
                        "example": "https:\/\/example.com\/chatbot_avatar.png"
                    },
                    "chatbot_background": {
                        "description": "The chatbot background",
                        "type": "string",
                        "example": "https:\/\/example.com\/chatbot_background.png"
                    },
                    "default_prompt": {
                        "description": "The default prompt",
                        "type": "string",
                        "example": "How can I help you?"
                    },
                    "example_questions": {
                        "description": "The example questions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "How do I get started?"
                        ]
                    },
                    "response_source": {
                        "description": "The response source",
                        "enum": [
                            "Default",
                            "My Content",
                            "My Content + ChatGPT"
                        ],
                        "type": "string",
                        "example": "https:\/\/example.com\/response_source.json"
                    },
                    "chatbot_msg_lang": {
                        "description": "The chatbot message language",
                        "type": "string",
                        "example": "en"
                    },
                    "chatbot_color": {
                        "description": "The chatbot color in hex format",
                        "type": "string",
                        "example": "#000000"
                    },
                    "persona_instructions": {
                        "description": "Role instructions for persona or null if persona must be delete",
                        "type": "string",
                        "nullable": true,
                        "example": "You are a custom chatbot assistant called CustomGPT, a friendly lawyer who answers questions based on the given context."
                    }
                }
            },
            "OpenGraphCache": {
                "type": "object",
                "properties": {
                    "page_url": {
                        "description": "The URL of the page",
                        "type": "string",
                        "example": "https:\/\/www.example.com"
                    },
                    "title": {
                        "description": "The title of the page",
                        "type": "string",
                        "example": "Example Domain"
                    },
                    "description": {
                        "description": "The description of the page",
                        "type": "string",
                        "example": "This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission."
                    },
                    "image": {
                        "description": "The image of the page",
                        "type": "string",
                        "example": "https:\/\/www.example.com\/image.png"
                    },
                    "image_width": {
                        "description": "The width of the image of the page",
                        "type": "integer",
                        "example": 1200
                    },
                    "image_height": {
                        "description": "The height of the image of the page",
                        "type": "integer",
                        "example": 630
                    },
                    "url": {
                        "description": "The URL of the page",
                        "type": "string",
                        "example": "https:\/\/www.example.com"
                    },
                    "favicon": {
                        "description": "The favicon of the page",
                        "type": "string",
                        "example": "https:\/\/www.example.com\/favicon.ico"
                    },
                    "site_name": {
                        "description": "The site name of the page",
                        "type": "string",
                        "example": "Example Domain"
                    }
                }
            },
            "Page": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Page ID",
                        "type": "integer",
                        "example": 1
                    },
                    "page_url": {
                        "description": "URL of the page or file",
                        "type": "string",
                        "example": "https:\/\/example.com"
                    },
                    "page_url_hash": {
                        "description": "Hash of the URL of the page or file",
                        "format": "md5",
                        "type": "string",
                        "example": "d41d8cd98f00b204e9800998ecf8427e"
                    },
                    "project_id": {
                        "description": "Project ID",
                        "type": "integer",
                        "example": 1
                    },
                    "s3_path": {
                        "description": "This is the path where the page is stored in S3.\\nNote: This is omitted in the response if the page is not a file",
                        "type": "string",
                        "nullable": true,
                        "example": "project-1\/page-1\/file.pdf"
                    },
                    "crawl_status": {
                        "description": "Crawl status of the page",
                        "enum": [
                            "ok",
                            "queued",
                            "failed",
                            "n\/a",
                            "limited"
                        ],
                        "default": "queued",
                        "type": "string",
                        "example": "queued"
                    },
                    "index_status": {
                        "description": "Index status of the page",
                        "enum": [
                            "ok",
                            "queued",
                            "failed",
                            "n\/a",
                            "limited"
                        ],
                        "default": "queued",
                        "type": "string",
                        "example": "queued"
                    },
                    "is_file": {
                        "description": "Whether the page is a file or not",
                        "default": false,
                        "type": "boolean",
                        "example": true
                    },
                    "is_file_kept": {
                        "description": "Whether the file is kept after processing or not.\\nNote: This is omitted in the response if the page is not a file",
                        "default": true,
                        "type": "boolean",
                        "example": true
                    },
                    "filename": {
                        "description": "Filename of the page.\\nNote: This is omitted in the response if the page is not a file",
                        "format": "binary",
                        "type": "string",
                        "nullable": true,
                        "example": "file.pdf"
                    },
                    "filesize": {
                        "description": "Filesize of the page.\\nNote: This is omitted in the response if the page is not a file",
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "created_at": {
                        "description": "Date and time when the page was created",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "updated_at": {
                        "description": "Date and time when the page was updated",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "deleted_at": {
                        "description": "Date and time when the page was deleted",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    }
                }
            },
            "Project": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Project ID",
                        "type": "integer",
                        "example": 1
                    },
                    "project_name": {
                        "description": "Project name",
                        "type": "string",
                        "example": "My Project"
                    },
                    "sitemap_path": {
                        "description": "Project sitemap",
                        "type": "string",
                        "example": "https:\/\/www.example.com\/sitemap.xml"
                    },
                    "is_chat_active": {
                        "description": "Whether the chat bot is active or not",
                        "default": false,
                        "type": "boolean",
                        "example": true
                    },
                    "user_id": {
                        "description": "User ID of the project owner",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "description": "Date and time when the project was created",
                        "default": "2023-05-08 13:06:55",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "updated_at": {
                        "description": "Date and time when the project was last updated",
                        "default": "2023-05-08 13:06:55",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "deleted_at": {
                        "description": "Date and time when the project was deleted",
                        "format": "date-time",
                        "type": "string",
                        "nullable": true,
                        "example": "2021-01-01 00:00:00"
                    },
                    "type": {
                        "description": "Project type",
                        "enum": [
                            "SITEMAP",
                            "URL"
                        ],
                        "default": "SITEMAP",
                        "type": "string",
                        "example": "SITEMAP"
                    },
                    "is_shared": {
                        "description": "Whether the project is shared or not",
                        "default": false,
                        "type": "boolean",
                        "example": true
                    },
                    "shareable_slug": {
                        "description": "Shareable slug that can be used to share the project",
                        "format": "md5",
                        "type": "string",
                        "nullable": true,
                        "example": "1234567890abcdef1234567890abcdef"
                    },
                    "shareable_link": {
                        "description": "Shareable link that can be used to share the project",
                        "format": "url",
                        "type": "string",
                        "nullable": true
                    },
                    "embed_code": {
                        "description": "Embed code that can be used to embed the project",
                        "format": "html",
                        "type": "string",
                        "nullable": true
                    },
                    "live_chat_code": {
                        "description": "Live chat code that can be used to embed the live chat",
                        "format": "html",
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "created_at": {
                        "description": "When was this user created?",
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-04-30 16:43:53"
                    },
                    "email": {
                        "description": "User email",
                        "format": "email",
                        "type": "string",
                        "example": "user@domain.com"
                    },
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "User name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "profile_photo_url": {
                        "description": "User profile photo URL",
                        "format": "url",
                        "type": "string",
                        "example": "https:\/\/app.customgpt.ai\/user\/1\/profile_photo_url"
                    },
                    "updated_at": {
                        "description": "When was this user updated?",
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-04-30 16:43:53"
                    }
                }
            },
            "ProjectPlugin": {
                "type": "object",
                "properties": {
                    "model_name": {
                        "description": "Model Name",
                        "type": "string",
                        "example": "IndoorPlants"
                    },
                    "human_name": {
                        "description": "Name For Human",
                        "type": "string",
                        "example": "The Indoor Plants Channel"
                    },
                    "keywords": {
                        "description": "Keywords For Model",
                        "type": "string",
                        "example": "Indoor plants, Gardening, Trusted information."
                    },
                    "description": {
                        "description": "Description For Human",
                        "type": "string",
                        "example": "Trusted information about indoor plants and gardening."
                    },
                    "logo": {
                        "description": "Project plugin logo",
                        "type": "string",
                        "example": "https:\/\/app.customgpt.ai\/logo.svg"
                    },
                    "is_active": {
                        "description": "Whether the project plugin is active or not",
                        "default": false,
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "ProjectSource": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The project source ID",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "description": "The project source creation date",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "updated_at": {
                        "description": "The project source update date",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "type": {
                        "description": "The project source type",
                        "enum": [
                            "sitemap",
                            "upload"
                        ],
                        "type": "string",
                        "example": "sitemap"
                    },
                    "settings": {
                        "description": "The project source settings",
                        "type": "object",
                        "properties": {
                            "data_refresh": {
                                "description": "Whether the project source data should be refreshed",
                                "default": false,
                                "type": "boolean",
                                "example": true
                            },
                            "executive_js": {
                                "description": "Whether the project source should execute JavaScript",
                                "default": true,
                                "type": "boolean",
                                "example": true
                            },
                            "data_refresh_frequency": {
                                "description": "The project source data refresh frequency",
                                "default": "never",
                                "type": "string",
                                "example": "never"
                            },
                            "sitemap_path": {
                                "description": "The project source sitemap path",
                                "type": "string",
                                "example": "https:\/\/example.com\/sitemap.xml"
                            }
                        }
                    },
                    "pages": {
                        "description": "The project source pages",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/Page"
                        },
                        "nullable": true
                    }
                }
            },
            "PromptHistory": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The unique identifier of the prompt history.",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "The unique identifier of the user.",
                        "type": "integer",
                        "example": 1
                    },
                    "user_query": {
                        "description": "The user prompt query.",
                        "type": "string",
                        "example": "What is the meaning of life?"
                    },
                    "openai_response": {
                        "description": "The OpenAI response to the user prompt query.",
                        "type": "string",
                        "example": "The meaning of life is to be happy."
                    },
                    "created_at": {
                        "description": "The date and time the prompt history was created.",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "updated_at": {
                        "description": "The date and time the prompt history was last updated.",
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01 00:00:00"
                    },
                    "conversation_id": {
                        "description": "The unique identifier of the conversation.",
                        "type": "integer",
                        "example": 1
                    },
                    "citations": {
                        "description": "The citations for the prompt history.",
                        "default": [],
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "example": [
                            1,
                            2,
                            3
                        ]
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "user_ip": {
                                "description": "The IP address of the user.",
                                "type": "string",
                                "example": "127.0.0.1"
                            },
                            "user_agent": {
                                "description": "The user agent of the user.",
                                "type": "string",
                                "example": "Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit\/537.36 (KHTML, like Gecko)"
                            }
                        },
                        "example": {
                            "user_ip": "127.0.0.1",
                            "user_agent": "Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit\/537.36 (KHTML, like Gecko)"
                        }
                    }
                }
            },
            "Conversation": {
                "type": "object",
                "properties": {
                    "created_at": {
                        "description": "When was this conversation created?",
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-04-30 16:43:53"
                    },
                    "updated_at": {
                        "description": "When was this conversation updated?",
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-04-30 16:43:53"
                    },
                    "deleted_at": {
                        "description": "When was this conversation deleted?",
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-04-30 16:43:53"
                    },
                    "id": {
                        "description": "Conversation ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Conversation name",
                        "type": "string",
                        "example": "Conversation 1"
                    },
                    "project_id": {
                        "description": "Project ID for this conversation",
                        "type": "string",
                        "example": 1
                    },
                    "created_by": {
                        "description": "User ID for the user who created this conversation",
                        "type": "string",
                        "example": 1
                    },
                    "session_id": {
                        "description": "Session ID for this conversation",
                        "format": "uuid",
                        "type": "string",
                        "example": "f1b9aaf0-5e4e-11eb-ae93-0242ac130002"
                    }
                }
            }
        },
        "responses": {
            "FlaskServiceErrorResponse": {
                "description": "Service unavailable",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Sitemap URL is empty",
                                                "Our system could not validate your sitemap",
                                                "Our system could not detect any pages in your sitemap"
                                            ],
                                            "type": "string",
                                            "example": "Sitemap URL is empty"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PageReindexErrorResponse": {
                "description": "Page cannot be reindexed",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Page with id {pageId} cannot be reindexed"
                                            ],
                                            "type": "string",
                                            "example": "Page with id 1 cannot be reindexed"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CreateProjectSourceResponse": {
                "description": "Successfully created a new project source.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/ProjectSource"
                                }
                            }
                        }
                    }
                }
            },
            "DeleteProjectResponse": {
                "description": "Project deleted successfully",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "deleted": {
                                            "description": "Whether the project was deleted successfully or not",
                                            "type": "boolean",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ListProjectsResponse": {
                "description": "Successfully retrieved list of sources that belong to a project.",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "sitemaps": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/ProjectSource"
                                            }
                                        },
                                        "uploads": {
                                            "$ref": "#\/components\/schemas\/ProjectSource"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ProjectStatsResponse": {
                "description": "Project stats",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "pages_found": {
                                            "description": "Number of pages found for the project",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "pages_crawled": {
                                            "description": "Number of pages crawled for the project",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "pages_indexed": {
                                            "description": "Number of pages indexed for the project",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "crawl_credits_used": {
                                            "description": "Number of crawl credits used for the project",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "query_credits_used": {
                                            "description": "Number of query credits used for the project",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "index_credits_used": {
                                            "description": "Number of index credits used for the project",
                                            "type": "integer",
                                            "example": 100
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ProjectPluginNotFoundErrorResponse": {
                "description": "Project plugin not found",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 404
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Project plugin id is required",
                                                "Project plugin with id {pluginId} not found",
                                                "Plugin for project with id {projectId} not found"
                                            ],
                                            "type": "string",
                                            "example": "Project plugin with id 1 not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ApiTokenValidationErrorResponse": {
                "description": "API Token is either missing or invalid",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 401
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "API Token is either missing or invalid"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BadArgumentErrorResponse": {
                "description": "Bad Argument",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "type": "string",
                                            "example": "Project id must be integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ListProjectSettingsResponse": {
                "description": "Project settings that belong to a certain project",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/ProjectSettings"
                                }
                            }
                        }
                    }
                }
            },
            "SendConversationResponse": {
                "description": "Send a message to a conversation",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/PromptHistory"
                                }
                            }
                        }
                    }
                }
            },
            "ProjectNotFoundErrorResponse": {
                "description": "Project not found",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 404
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Project id is required",
                                                "Project with id {projectId} not found"
                                            ],
                                            "type": "string",
                                            "example": "Project with id 1 not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CreateConversationResponse": {
                "description": "Create a new conversation",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/Conversation"
                                }
                            }
                        }
                    }
                }
            },
            "CreateProjectErrorResponse": {
                "description": "Project creation failed",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Project name can't be empty",
                                                "Sitemap path can't be empty",
                                                "You have reached your monthly project limit"
                                            ],
                                            "type": "string",
                                            "example": "Project name can't be empty"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ProjectCreatedResponse": {
                "description": "Project has been created",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/Project"
                                }
                            }
                        }
                    }
                }
            },
            "ListProjectResponse": {
                "description": "Retrieve certain project that belongs to the user",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/Project"
                                }
                            }
                        }
                    }
                }
            },
            "ListProjectPluginResponse": {
                "description": "Project plugin that belong to a certain project",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/ProjectPlugin"
                                }
                            }
                        }
                    }
                }
            },
            "UpdateProjectResponse": {
                "description": "Project has been updated",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/Project"
                                }
                            }
                        }
                    }
                }
            },
            "UpdateProjectSettingsResponse": {
                "description": "Project settings have been updated",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "updated": {
                                            "description": "Whether the project was updated successfully or not",
                                            "type": "boolean",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "UpdateProjectPluginResponse": {
                "description": "Project plugin have been updated",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/ProjectPlugin"
                                }
                            }
                        }
                    }
                }
            },
            "InternalServerErrorResponse": {
                "description": "Internal Server Error",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 500
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Internal Server Error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ConversationMessageListResponse": {
                "description": "List all messages in a conversation",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "conversation": {
                                            "$ref": "#\/components\/schemas\/Conversation"
                                        },
                                        "messages": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "description": "The current page number",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#\/components\/schemas\/PromptHistory"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "description": "The first page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "from": {
                                                    "description": "The first item number of the current page",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "description": "The last page number",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page_url": {
                                                    "description": "The last page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "next_page_url": {
                                                    "description": "The next page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "path": {
                                                    "description": "The current page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "per_page": {
                                                    "description": "The number of items per page",
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "prev_page_url": {
                                                    "description": "The previous page url",
                                                    "type": "string",
                                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/users?page=1"
                                                },
                                                "to": {
                                                    "description": "The last item number of the current page",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "total": {
                                                    "description": "The total number of items",
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CreateProjectPluginResponse": {
                "description": "Project plugin have been created",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "success"
                                },
                                "data": {
                                    "$ref": "#\/components\/schemas\/ProjectPlugin"
                                }
                            }
                        }
                    }
                }
            },
            "UpdateProjectSettingsErrorResponse": {
                "description": "Update project settings failed",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Please upload a valid image file for avatar",
                                                "Please upload a valid image file for background",
                                                "Language Proficiency is required."
                                            ],
                                            "type": "string",
                                            "example": "Please upload a valid image file for avatar"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PageNotFoundErrorResponse": {
                "description": "Page not found",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "The status of the response",
                                    "enum": [
                                        "error",
                                        "success"
                                    ],
                                    "type": "string",
                                    "example": "error"
                                },
                                "url": {
                                    "description": "The URL of the request",
                                    "type": "string",
                                    "example": "https:\/\/app.customgpt.ai\/api\/v1\/projects\/1"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "description": "The error status code",
                                            "enum": [
                                                400,
                                                401,
                                                403,
                                                404,
                                                500,
                                                503
                                            ],
                                            "type": "integer",
                                            "example": 404
                                        },
                                        "message": {
                                            "description": "The error message",
                                            "enum": [
                                                "Page id is required",
                                                "Page with id {pageId} not found"
                                            ],
                                            "type": "string",
                                            "example": "Page with id 1 not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "BearerToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Projects",
            "description": "API Endpoints for Projects"
        },
        {
            "name": "Pages",
            "description": "API Endpoints for Pages"
        },
        {
            "name": "Users",
            "description": "API Endpoints for Users"
        },
        {
            "name": "Project Settings",
            "description": "API Endpoints for Project Settings"
        },
        {
            "name": "Project Plugins",
            "description": "API Endpoints for Project Plugins"
        },
        {
            "name": "Conversations",
            "description": "API Endpoints for Conversations"
        },
        {
            "name": "Citations",
            "description": "API Endpoints for Citations"
        }
    ],
    "x-readme": {
        "explorer-enabled": true,
        "proxy-enabled": true,
        "samples-enabled": true
    }
}
```

Contents of examples/Add_a_file_to_an_existing_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Add a sitemap to an existing project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SDGeV1BbMTmS"
      },
      "source": [
        "**Create a project for the account**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PNbGtm_A1WLp",
        "outputId": "6561bebe-5150-48af-853d-c495d2d44bd8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":835,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":41,\"is_chat_active\":null,\"created_at\":\"2023-07-06T20:59:03.000000Z\",\"updated_at\":\"2023-07-06T20:59:03.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PpE82Xu4XCRY"
      },
      "source": [
        "** Add a sitemap to project**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "id": "iMHuDBmDWcLU",
        "outputId": "3d8fff8a-c29e-4154-e657-99ae646e86fd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-dc5d1169-08a4-4052-b480-8f14ceb17e52\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-dc5d1169-08a4-4052-b480-8f14ceb17e52\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Vanka-By-Anton-Chekhov-book-PDF.pdf to Vanka-By-Anton-Chekhov-book-PDF.pdf\n",
            "{\"data\":{\"id\":1600,\"created_at\":\"2023-07-06T20:59:03.000000Z\",\"updated_at\":\"2023-07-06T20:59:03.000000Z\",\"type\":\"upload\",\"settings\":[],\"pages\":[{\"id\":15190,\"page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/preview\\/15190\",\"page_url_hash\":\"3eeff0d8782a5684b0b5838d7e117f07\",\"created_at\":\"2023-07-06T20:59:31.000000Z\",\"updated_at\":\"2023-07-06T20:59:31.000000Z\",\"crawl_status\":null,\"index_status\":null,\"is_file\":true,\"is_file_kept\":true,\"s3_path\":\"projects\\/835\\/WoQrfqSCMtl516fMc0WlBcjdB97VQkGZFsEDInVy.pdf\",\"filename\":\"file\",\"filesize\":195740}]},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "# Give a name to your project\n",
        "project_id = json.loads(create_project.text)['data']['id']\n",
        "\n",
        "# Give a name to your project\n",
        "headers = {\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "file_data = file_content\n",
        "payload = {\n",
        "    \"file\": file_data\n",
        "}\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}/\" + 'sources'\n",
        "create_source = requests.request('POST', url, headers=headers, files=payload)\n",
        "print(create_source.text)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Add_a_sitemap_to_an_existing_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Add a sitemap to an existing project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SDGeV1BbMTmS"
      },
      "source": [
        "**Create a project for the account**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PNbGtm_A1WLp",
        "outputId": "7fd8497b-39cf-404c-af1c-8077d4cd77b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":833,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":41,\"is_chat_active\":null,\"created_at\":\"2023-07-06T20:32:17.000000Z\",\"updated_at\":\"2023-07-06T20:32:17.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PpE82Xu4XCRY"
      },
      "source": [
        "** Add a sitemap to project**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iMHuDBmDWcLU",
        "outputId": "fc6373d3-683b-46d0-f4a4-bbbdf7d42030"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":1592,\"created_at\":\"2023-07-06T20:33:04.000000Z\",\"updated_at\":\"2023-07-06T20:33:04.000000Z\",\"type\":\"sitemap\",\"settings\":{\"sitemap_path\":\"https:\\/\\/adorosario.github.io\\/small-sitemap.xml\",\"data_refresh\":false,\"executive_js\":true,\"data_refresh_frequency\":\"never\"}},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_id = json.loads(create_project.text)['data']['id']\n",
        "new_sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "payload = json.dumps({\n",
        "    \"sitemap_path\": new_sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}/\" + 'sources'\n",
        "create_source = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_source.text)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Create_Bot_By_File.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a file.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a file**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "outputId": "fe50a87c-2a5e-48ed-95da-8a071ed44fee"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5916b129-9997-42fe-a0b5-38dc0ec74cce\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5916b129-9997-42fe-a0b5-38dc0ec74cce\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving story.pdf to story.pdf\n",
            "{\"data\":{\"id\":531,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-25T17:11:58.000000Z\",\"updated_at\":\"2023-06-25T17:11:58.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Give a name to your project\n",
        "headers = {\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "file_data = file_content\n",
        "payload = {\n",
        "    \"project_name\": (None, project_name),\n",
        "    \"file\": file_data\n",
        "}\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "create_project = requests.request('POST', url, headers=headers, files=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "D1La0GFc1WLq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65d54a75-3790-43c9-eaf2-f84a4a44826b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = json.loads(create_project.text)[\"data\"]\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data[\"id\"]\n",
        "\n",
        "# Check if chat bot is active using `is_chat_active` flag in project detail response\n",
        "# GET project details\n",
        "url = api_endpoint + 'projects/' + str(project_id)\n",
        "\n",
        "get_project = requests.request('GET', url, headers=headers)\n",
        "project_data = json.loads(get_project.text)[\"data\"]\n",
        "is_chat_active = project_data[\"is_chat_active\"]\n",
        "\n",
        "print(is_chat_active)\n",
        "\n",
        "# One can poll this GET project details API to check if chat bot is active before starting a conversation\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "ZnAs_Bhe1WLr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8971853-cf9a-4ea5-ce4b-34ca83c683a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"project_id\":531,\"name\":\"My First Conversation\",\"created_by\":35,\"session_id\":\"f9b27f03-c660-4e90-a5af-95278b61f350\",\"updated_at\":\"2023-06-25T17:12:08.000000Z\",\"created_at\":\"2023-06-25T17:12:08.000000Z\",\"id\":221},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Create a conversation before sending a message to the chat bot\n",
        "headers['Content-type'] = 'application/json'\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"name\": \"My First Conversation\"\n",
        "})\n",
        "\n",
        "create_conversation = requests.request(\"POST\", url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "-FXUfq-i1WLr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "552791db-0132-4a9d-fe8a-cb9e715c68e7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting sseclient-py\n",
            "  Downloading sseclient_py-1.7.2-py2.py3-none-any.whl (8.4 kB)\n",
            "Installing collected packages: sseclient-py\n",
            "Successfully installed sseclient-py-1.7.2\n"
          ]
        }
      ],
      "source": [
        "# for streaming response import SSE Client\n",
        "!pip install sseclient-py\n",
        "\n",
        "from sseclient import SSEClient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "B4gnIWk31WLs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bd86af2e-49c9-4dfc-bf7f-0d910869ce84"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"status\":\"start\",\"prompt\":\"Who is Professor Mois ture\"}\n",
            "{\"status\":\"progress\",\"message\":\"\"}\n",
            "{\"status\":\"progress\",\"message\":\"Professor\"}\n",
            "{\"status\":\"progress\",\"message\":\" Mo\"}\n",
            "{\"status\":\"progress\",\"message\":\"is\"}\n",
            "{\"status\":\"progress\",\"message\":\" T\"}\n",
            "{\"status\":\"progress\",\"message\":\"ure\"}\n",
            "{\"status\":\"progress\",\"message\":\" is\"}\n",
            "{\"status\":\"progress\",\"message\":\" a\"}\n",
            "{\"status\":\"progress\",\"message\":\" character\"}\n",
            "{\"status\":\"progress\",\"message\":\" in\"}\n",
            "{\"status\":\"progress\",\"message\":\" the\"}\n",
            "{\"status\":\"progress\",\"message\":\" book\"}\n",
            "{\"status\":\"progress\",\"message\":\" who\"}\n",
            "{\"status\":\"progress\",\"message\":\" teaches\"}\n",
            "{\"status\":\"progress\",\"message\":\" about\"}\n",
            "{\"status\":\"progress\",\"message\":\" water\"}\n",
            "{\"status\":\"progress\",\"message\":\",\"}\n",
            "{\"status\":\"progress\",\"message\":\" rain\"}\n",
            "{\"status\":\"progress\",\"message\":\",\"}\n",
            "{\"status\":\"progress\",\"message\":\" hail\"}\n",
            "{\"status\":\"progress\",\"message\":\",\"}\n",
            "{\"status\":\"progress\",\"message\":\" s\"}\n",
            "{\"status\":\"progress\",\"message\":\"leet\"}\n",
            "{\"status\":\"progress\",\"message\":\",\"}\n",
            "{\"status\":\"progress\",\"message\":\" and\"}\n",
            "{\"status\":\"progress\",\"message\":\" the\"}\n",
            "{\"status\":\"progress\",\"message\":\" water\"}\n",
            "{\"status\":\"progress\",\"message\":\" cycle\"}\n",
            "{\"status\":\"progress\",\"message\":\".\"}\n",
            "{\"status\":\"finish\",\"id\":433,\"created_at\":\"2023-06-25T17:12:28.000000Z\",\"session_id\":\"f9b27f03-c660-4e90-a5af-95278b61f350\",\"citations\":[12074]}\n"
          ]
        }
      ],
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Professor Mois ture\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 1\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "\n",
        "headers[\"Accept\"] = \"text/event-stream\"\n",
        "\n",
        "stream_response = requests.post(url, stream=True, headers=headers, data=payload)\n",
        "client = SSEClient(stream_response)\n",
        "for event in client.events():\n",
        "    print(event.data)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Create_Bot_By_Sitemap.ipynb:
```
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create your custom chat bot using a sitemap.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# setup API URL and API Token\n",
    "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
    "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
    "headers = {\n",
    "    'Content-Type': 'application/json',\n",
    "    'Authorization': 'Bearer ' + api_token\n",
    "}\n",
    "\n",
    "# imports\n",
    "import requests\n",
    "import json"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**An example for to create a project with a sitemap**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Give a name to your project\n",
    "project_name = 'Example ChatBot using Sitemap'\n",
    "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
    "\n",
    "payload = json.dumps({\n",
    "    \"project_name\": project_name,\n",
    "    \"sitemap_path\": sitemap_path\n",
    "})\n",
    "\n",
    "url = api_endpoint + 'projects'\n",
    "\n",
    "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
    "print(create_project.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check status of the project if chat bot is active\n",
    "data = json.loads(create_project.text)[\"data\"]\n",
    "\n",
    "# Get project id from response for created project\n",
    "project_id = data[\"id\"]\n",
    "\n",
    "# Check if chat bot is active using `is_chat_active` flag in project detail response\n",
    "# GET project details\n",
    "url = api_endpoint + 'projects/' + str(project_id)\n",
    "\n",
    "get_project = requests.request('GET', url, headers=headers)\n",
    "project_data = json.loads(get_project.text)[\"data\"]\n",
    "is_chat_active = project_data[\"is_chat_active\"]\n",
    "\n",
    "print(is_chat_active)\n",
    "\n",
    "# One can poll this GET project details API to check if chat bot is active before starting a conversation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a conversation before sending a message to the chat bot\n",
    "url = api_endpoint + 'projects/' + str(project_id) + '/conversations'\n",
    "\n",
    "payload = json.dumps({\n",
    "    \"name\": \"My First Conversation\"\n",
    "})\n",
    "\n",
    "create_conversation = requests.request(\"POST\", url, headers=headers, data=payload)\n",
    "print(create_conversation.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for streaming response import SSE Client\n",
    "!pip install sseclient-py\n",
    "\n",
    "from sseclient import SSEClient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a message to the above conversation\n",
    "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
    "\n",
    "# session_id is important to maintain chat history\n",
    "session_id = conversation_data[\"session_id\"]\n",
    "\n",
    "# pass in your question to prompt\n",
    "prompt = \"Who is Tom Brady\"\n",
    "\n",
    "# set stream to 1 to get a streaming response\n",
    "stream = 1\n",
    "\n",
    "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
    "payload = json.dumps({\n",
    "    \"prompt\": prompt,\n",
    "    \"stream\": stream\n",
    "})\n",
    "\n",
    "headers[\"Accept\"] = \"text/event-stream\"\n",
    "\n",
    "stream_response = requests.post(url, stream=True, headers=headers, data=payload)\n",
    "client = SSEClient(stream_response)\n",
    "for event in client.events():\n",
    "    print(event.data)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

```

Contents of examples/Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create a new conversation and send a message to the converstation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'YOUR_API_TOKEN'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7cb6b68-3ed5-40fd-ba6e-53d6c9babe68"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":1243,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":42,\"is_chat_active\":null,\"created_at\":\"2023-09-29T11:29:14.000000Z\",\"updated_at\":\"2023-09-29T11:29:14.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Project Conversation**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data['id']\n",
        "# Get the project settings\n",
        "name = 'Test Converasation'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"name\": project_name\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/conversations'\n",
        "\n",
        "create_conversation = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to conversation stream True**"
      ],
      "metadata": {
        "id": "_yGXSwRbP6qi"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-FXUfq-i1WLr"
      },
      "outputs": [],
      "source": [
        "# for streaming response import SSE Client\n",
        "!pip install sseclient-py\n",
        "\n",
        "from sseclient import SSEClient"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom Brady\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 1\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"custom_persona\": \"You are a custom chatbot assistant called *Story Teller*, a friendly story teller who works for Test and answers questions based on the given context. Be as helpful as possible. Always prioritize the customer. Escalate complex issues. Stay on topic. Use appropriate language, Acknowledge limitations.\",\n",
        "    \"stream\": stream\n",
        "})\n",
        "\n",
        "headers[\"Accept\"] = \"text/event-stream\"\n",
        "\n",
        "stream_response = requests.post(url, stream=False, headers=headers, data=payload)\n",
        "client = SSEClient(stream_response)\n",
        "for event in client.events():\n",
        "    print(event.data)"
      ],
      "metadata": {
        "id": "0xnMN8tQUQXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to conversation stream False**"
      ],
      "metadata": {
        "id": "TSuIaZjbeUGu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 0\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "non_stream_response = requests.post(url, stream=False, headers=headers, data=payload)\n",
        "print(non_stream_response)\n",
        "print(non_stream_response.text)"
      ],
      "metadata": {
        "id": "Dcwzbnn1eaIX"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Delete_a_page_from_the_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Delete a page from the project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d03b23b6-a42d-49ca-a08b-797249aff1c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":522,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-24T21:38:54.000000Z\",\"updated_at\":\"2023-06-24T21:38:54.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create some conversations to fill out project pages**"
      ],
      "metadata": {
        "id": "PpE82Xu4XCRY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Give a name to your project\n",
        "name = 'Test Converasation'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"name\": project_name\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/conversations'\n",
        "\n",
        "create_conversation = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iMHuDBmDWcLU",
        "outputId": "517c8f36-5c42-424b-da97-91c280b6b44b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"project_id\":522,\"name\":\"Example ChatBot using Sitemap\",\"created_by\":35,\"session_id\":\"bae1efb6-efd3-4644-a544-3e8b85d5d746\",\"updated_at\":\"2023-06-24T21:42:28.000000Z\",\"created_at\":\"2023-06-24T21:42:28.000000Z\",\"id\":217},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project pages**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Update the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages'\n",
        "\n",
        "project_pages = requests.request('GET', url, headers=headers)\n",
        "print(project_pages.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9fdf1dd0-1ebd-42e5-e378-97f150944767"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"project\":{\"id\":522,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":1,\"created_at\":\"2023-06-24T21:38:54.000000Z\",\"updated_at\":\"2023-06-24T21:39:34.000000Z\",\"is_shared\":0,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"pages\":{\"current_page\":1,\"data\":[{\"id\":11993,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/tom-brady-tampa-bay-buccaneers-new-england-patriots-indianapolis-colts-denver-broncos-64c660906bfdd828c9cf69e94cfefcb7\",\"page_url_hash\":\"c63e5fb2e92bd5345c91f8d50b5b3736\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:24\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11992,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/tom-brady-retirement-a53ee71d6ab99276fd0765052c0dd7aa\",\"page_url_hash\":\"13d0ae8867ab1f7177464f48efaf28e2\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:25\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11991,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/tom-brady-announces-retirement-3ac2e55d0880672d330e8ff3d4318367\",\"page_url_hash\":\"fda42c4a04c24e0b00d4e39a597a782a\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:24\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11990,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/nfl-sports-entertainment-tom-brady-florida-60b97f2aaf51b83f0e76c7d07e7dc2cd\",\"page_url_hash\":\"388de9a2a5d51623ad69de0084ec4ee4\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:22\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11989,\"page_url\":\"https:\\/\\/americanfootball.fandom.com\\/wiki\\/tom_brady\",\"page_url_hash\":\"ea128fabb583550dc26f539cd4ba6718\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:39:54\",\"crawl_status\":\"ok\",\"index_status\":\"n\\/a\",\"is_file\":false},{\"id\":11988,\"page_url\":\"https:\\/\\/alexaanswers.amazon.com\\/question\\/2zmobid9uhszpzjea8060k\",\"page_url_hash\":\"72b248ec584f6e5efdb08a92c83f8074\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:27\",\"crawl_status\":\"ok\",\"index_status\":\"n\\/a\",\"is_file\":false},{\"id\":11987,\"page_url\":\"https:\\/\\/abcnews.go.com\\/us\\/tom-brady-announces-retirement\\/story?id=96815178\",\"page_url_hash\":\"5a9027d19891a4f08358a2e7100ed6d5\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:39:47\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11986,\"page_url\":\"https:\\/\\/985thesportshub.com\\/listicle\\/tom-brady-retiring-from-football-after-22-seasons-7-super-bowl-titles\\/\",\"page_url_hash\":\"ced794a09f3d91825453d9d141e75794\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:13\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11985,\"page_url\":\"https:\\/\\/247sports.com\\/player\\/tom-brady-76179\\/\",\"page_url_hash\":\"b18a144a7b5de4a94cc57c64346ccf2f\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:39:34\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false},{\"id\":11984,\"page_url\":\"https:\\/\\/1033thegoat.com\\/tom-brady-has-won-more-super-bowls-than-these-18-teams-combined\\/\",\"page_url_hash\":\"4d05356e44f08caf9bda3a7667d4f1aa\",\"created_at\":\"2023-06-24T21:39:04.000000Z\",\"updated_at\":\"2023-06-24 21:40:20\",\"crawl_status\":\"ok\",\"index_status\":\"ok\",\"is_file\":false}],\"first_page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/522\\/pages?page=1\",\"from\":1,\"last_page\":1,\"last_page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/522\\/pages?page=1\",\"next_page_url\":null,\"path\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/522\\/pages\",\"per_page\":20,\"prev_page_url\":null,\"to\":10,\"total\":10}},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Delete a project page**"
      ],
      "metadata": {
        "id": "nC0s7U36VOVA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(project_pages.text)[\"data\"]\n",
        "page_id = data[\"pages\"]['data'][0]['id']\n",
        "print(page_id)\n",
        "# Update the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages' + f\"/{page_id}\"\n",
        "\n",
        "delete_page = requests.request('DELETE', url, headers=headers)\n",
        "print(delete_page .text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fHnPwfB2VVPO",
        "outputId": "dd3ebadc-ea0d-4f71-ace0-3e5d1cc0c63e"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11993\n",
            "{\"data\":{\"deleted\":true},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZS90sURtXhxU"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Delete_a_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Delete a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "455aaf99-fc5b-4427-f87b-9c632d5bacc5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":511,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-24T21:30:23.000000Z\",\"updated_at\":\"2023-06-24T21:30:23.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Deleting the newly created project**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Delete the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\"\n",
        "\n",
        "delete_project = requests.request('DELETE', url, headers=headers)\n",
        "print(delete_project.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4cbad15c-8961-4447-979b-99c858f94796"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\n",
            "    \"message\": \"This action is unauthorized.\"\n",
            "}\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/GetAndUpdatePageMetadata.ipynb:
```
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "eZWXtZ0nfAoA"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "# api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "api_token = 'YOUR_API_KEY'\n",
        "headers = {\n",
        "    'Content-Type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a Chatbot**"
      ],
      "metadata": {
        "id": "b4Zh1NvwfUx0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ],
      "metadata": {
        "id": "AGD7EdMYgXUD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e1a3cb7-e97e-4001-c96e-3c670a7d662b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":1242,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":42,\"is_chat_active\":null,\"created_at\":\"2023-09-29T11:16:43.000000Z\",\"updated_at\":\"2023-09-29T11:16:43.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get a project page**"
      ],
      "metadata": {
        "id": "_fQc28ICgbZ6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = json.loads(create_project.text)[\"data\"]\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data[\"id\"]\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages'\n",
        "project_pages = requests.request('GET', url, headers=headers)\n",
        "data = json.loads(project_pages.text)['data']\n",
        "page_id = data['pages']['data'][0]['id']\n",
        "print(page_id)"
      ],
      "metadata": {
        "id": "iE7Urhq7g06t",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7bed6c6-7b63-42ee-8739-e5375b1dea96"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "29814\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get page metadata**"
      ],
      "metadata": {
        "id": "2HMP-W40jXH-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages' + f\"/{page_id}\" +'/metadata'\n",
        "page_metadata = requests.request('GET', url, headers=headers)\n",
        "print(page_metadata)\n",
        "data = json.loads(page_metadata.text)['data']\n",
        "title = data['title']\n",
        "print(title)"
      ],
      "metadata": {
        "id": "bJYqBzHdiFHv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "55bdab71-87da-4876-d686-0522a7d1e926"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [200]>\n",
            "Brady's unprecedented career filled with highlight moments\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update Project Metadata**"
      ],
      "metadata": {
        "id": "PxWvN0yAoaWU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "payload = json.dumps({\n",
        "    \"title\": \"Test2\"\n",
        "})\n",
        "response = requests.request('PUT', url, headers=headers, data=payload)\n",
        "print(response.content)"
      ],
      "metadata": {
        "id": "m6axeH_KoeSC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d4d7223-87d3-458a-897d-15dc6cc11811"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b'{\"data\":{\"id\":27,\"page_id\":29814,\"title\":\"Test2\",\"url\":\"https:\\\\/\\\\/apnews.com\\\\/article\\\\/tom-brady-tampa-bay-buccaneers-new-england-patriots-indianapolis-colts-denver-broncos-64c660906bfdd828c9cf69e94cfefcb7\",\"description\":\"Nobody drove Tom Brady  harder than the record-setting quarterback himself, even if his 23rd and final season after a brief retirement didn\\'t end with him lifting yet another Lombardi Trophy.\",\"image\":\"https:\\\\/\\\\/storage.googleapis.com\\\\/afs-prod\\\\/media\\\\/12a7f215ea6d48e39a3960de7b9384d6\\\\/3000.jpeg\",\"created_at\":\"2023-09-29T11:17:00.000000Z\",\"updated_at\":\"2023-09-29T11:17:04.000000Z\",\"deleted_at\":null},\"status\":\"success\"}'\n"
          ]
        }
      ]
    }
  ]
}
```

Contents of examples/Get_Citation_File.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Get citation details**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'YOUR_API_TOKEN'\n",
        "\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# This endpoint is multipart/form-data\n",
        "from google.colab import files\n",
        "\n",
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "# For File Upload\n",
        "# uploaded_file = files.upload()\n",
        "# file_content = next(iter(uploaded_file.values()))\n",
        "# file_data = file_content\n",
        "payload = {\n",
        "    \"project_name\": (None, project_name),\n",
        "    \"sitemap_path\": (None, sitemap_path)\n",
        "    # \"file\": file_data\n",
        "}\n",
        "headers = {\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "create_project = requests.request('POST', url, headers=headers, files=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Add File Source to project**"
      ],
      "metadata": {
        "id": "RsQsfienk4SE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data['id']\n",
        "\n",
        "from google.colab import files\n",
        "\n",
        "# For File Upload\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "file_data = file_content\n",
        "payload = {\n",
        "    \"file\": file_data\n",
        "}\n",
        "headers = {\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/sources'\n",
        "create_project = requests.request('POST', url, headers=headers, files=payload)\n",
        "print(create_project.text)"
      ],
      "metadata": {
        "id": "_VL0C4uak-n4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Project Conversation**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the project settings\n",
        "name = 'Test Conversation'\n",
        "project_id= 1084\n",
        "payload = json.dumps({\n",
        "    \"name\": name\n",
        "})\n",
        "headers = {\n",
        "    'Content-type' : 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/conversations'\n",
        "create_conversation = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send Message to conversation**\n",
        "\n"
      ],
      "metadata": {
        "id": "_yGXSwRbP6qi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is tom\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 0\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "\n",
        "response_sitemap_query = requests.post(url, stream=False, headers=headers, data=payload)\n",
        "print(response_sitemap_query.text)"
      ],
      "metadata": {
        "id": "0xnMN8tQUQXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Citation id for sitemap query**"
      ],
      "metadata": {
        "id": "EKNqCvLGoSqg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "message_data = json.loads(response_sitemap_query.text)['data']\n",
        "citation_id = message_data['citations'][0]\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/citations/' + str(citation_id)\n",
        "citation_response = requests.get(url, headers=headers, data=payload)\n",
        "print(citation_response.text)"
      ],
      "metadata": {
        "id": "vRojVr2kobON"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Citation provider**"
      ],
      "metadata": {
        "id": "EY0a1mwwofTV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(citation_response.text)['data']\n",
        "page_url = data['page_url']\n",
        "if page_url:\n",
        "  preview_file = requests.get(page_url, headers=headers)\n",
        "  print(preview_file)\n",
        "else:\n",
        "  print(data['url'])"
      ],
      "metadata": {
        "id": "vD2Hkr9pop43"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send query of file**"
      ],
      "metadata": {
        "id": "pddDI7VInzvS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Vanka\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 0\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "\n",
        "response_file_query = requests.post(url, stream=False, headers=headers, data=payload)\n",
        "print(response_file_query.text)"
      ],
      "metadata": {
        "id": "2fejjg30n9cl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get citation id from message and check citation details**"
      ],
      "metadata": {
        "id": "ITA7rjBGn5yJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "message_data = json.loads(response_file_query.text)['data']\n",
        "citation_id = message_data['citations'][0]\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/citations/' + str(citation_id)\n",
        "citation_response = requests.get(url, headers=headers, data=payload)\n",
        "print(citation_response.text)"
      ],
      "metadata": {
        "id": "kBp7_HCuoDmE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Uploaded File/URL of citation**"
      ],
      "metadata": {
        "id": "BiQlWozTEMzj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(citation_response.text)['data']\n",
        "page_url = data['page_url']\n",
        "if page_url:\n",
        "  preview_file = requests.get(page_url, headers=headers)\n",
        "  print(preview_file.content)\n",
        "else:\n",
        "  print(data['url'])"
      ],
      "metadata": {
        "id": "jCsqKIqUCpIF"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Get_Project_Stats.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Get Project Stats**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3b28efe-3495-4de6-d1ae-f1e64973af61"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":509,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-24T21:17:19.000000Z\",\"updated_at\":\"2023-06-24T21:17:19.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Stats**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Update the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/stats'\n",
        "\n",
        "project_stats = requests.request('GET', url, headers=headers)\n",
        "print(project_stats.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f1cded5-7fa3-4b52-9fee-db6aa6327ccd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"pages_found\":10,\"pages_crawled\":10,\"pages_indexed\":8,\"crawl_credits_used\":10,\"query_credits_used\":0,\"total_queries\":0,\"total_words_indexed\":15656},\"status\":\"success\"}\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Get_Settings_for_a_particular_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Get Settings for a particular project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9e252b2f-b031-496a-b745-04d7fa61fab8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":524,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-25T11:02:05.000000Z\",\"updated_at\":\"2023-06-25T11:02:05.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project settings**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Get the project settings\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/settings'\n",
        "\n",
        "project_pages = requests.request('GET', url, headers=headers)\n",
        "print(project_pages.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "235250a8-bf62-4340-98d7-6db81c2ef1be"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"chatbot_avatar\":\"\",\"chatbot_background\":\"\",\"default_prompt\":\"Ask Me Anything ...\",\"example_questions\":null,\"response_source\":\"default\",\"chatbot_msg_lang\":\"en\",\"remove_branding\":false},\"status\":\"success\"}\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Get_citation_details.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Get citation details**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'YOUR_API_TOKEN'\n",
        "\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# This endpoint is multipart/form-data\n",
        "from google.colab import files\n",
        "\n",
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "# For File Upload\n",
        "# uploaded_file = files.upload()\n",
        "# file_content = next(iter(uploaded_file.values()))\n",
        "# file_data = file_content\n",
        "\n",
        "payload = {\n",
        "    \"project_name\": (None, project_name),\n",
        "    \"sitemap_path\": (None, sitemap_path)\n",
        "    # \"file\": file_data\n",
        "}\n",
        "headers = {\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "create_project = requests.request('POST', url, headers=headers, files=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Project Conversation**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Get the project settings\n",
        "name = 'Test Converasation'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"name\": project_name\n",
        "})\n",
        "headers = {\n",
        "    'Content-type' : 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/conversations'\n",
        "\n",
        "create_conversation = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send Message to conversation**\n",
        "\n"
      ],
      "metadata": {
        "id": "_yGXSwRbP6qi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install sseclient-py\n",
        "from sseclient import SSEClient\n"
      ],
      "metadata": {
        "id": "rBvJ0XXL9pWZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom brady\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 0\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "\n",
        "response = requests.post(url, stream=False, headers=headers, data=payload)\n",
        "print(response.text)"
      ],
      "metadata": {
        "id": "0xnMN8tQUQXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get citation id from message and check citation details**"
      ],
      "metadata": {
        "id": "ITA7rjBGn5yJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "message_data = json.loads(response.text)['data']\n",
        "citation_id = message_data['citations'][0]\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/citations/' + str(citation_id)\n",
        "citation_response = requests.get(url, headers=headers, data=payload)\n",
        "print(citation_response.text)"
      ],
      "metadata": {
        "id": "kBp7_HCuoDmE"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/List_all_pages_of_a_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**List all pages of a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f22a71ad-d492-4857-fcf5-a73c55677434"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":510,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-24T21:21:45.000000Z\",\"updated_at\":\"2023-06-24T21:21:45.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Pages**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Update the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages'\n",
        "\n",
        "project_pages = requests.request('GET', url, headers=headers)\n",
        "print(project_pages.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4884bac1-2e46-44d4-a861-fa25cbf7592d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"project\":{\"id\":510,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":0,\"created_at\":\"2023-06-24T21:21:45.000000Z\",\"updated_at\":\"2023-06-24T21:21:45.000000Z\",\"is_shared\":0,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"pages\":{\"current_page\":1,\"data\":[{\"id\":11873,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/tom-brady-tampa-bay-buccaneers-new-england-patriots-indianapolis-colts-denver-broncos-64c660906bfdd828c9cf69e94cfefcb7\",\"page_url_hash\":\"c63e5fb2e92bd5345c91f8d50b5b3736\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11872,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/tom-brady-retirement-a53ee71d6ab99276fd0765052c0dd7aa\",\"page_url_hash\":\"13d0ae8867ab1f7177464f48efaf28e2\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11871,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/tom-brady-announces-retirement-3ac2e55d0880672d330e8ff3d4318367\",\"page_url_hash\":\"fda42c4a04c24e0b00d4e39a597a782a\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11870,\"page_url\":\"https:\\/\\/apnews.com\\/article\\/nfl-sports-entertainment-tom-brady-florida-60b97f2aaf51b83f0e76c7d07e7dc2cd\",\"page_url_hash\":\"388de9a2a5d51623ad69de0084ec4ee4\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11869,\"page_url\":\"https:\\/\\/americanfootball.fandom.com\\/wiki\\/tom_brady\",\"page_url_hash\":\"ea128fabb583550dc26f539cd4ba6718\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11868,\"page_url\":\"https:\\/\\/alexaanswers.amazon.com\\/question\\/2zmobid9uhszpzjea8060k\",\"page_url_hash\":\"72b248ec584f6e5efdb08a92c83f8074\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11867,\"page_url\":\"https:\\/\\/abcnews.go.com\\/us\\/tom-brady-announces-retirement\\/story?id=96815178\",\"page_url_hash\":\"5a9027d19891a4f08358a2e7100ed6d5\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11866,\"page_url\":\"https:\\/\\/985thesportshub.com\\/listicle\\/tom-brady-retiring-from-football-after-22-seasons-7-super-bowl-titles\\/\",\"page_url_hash\":\"ced794a09f3d91825453d9d141e75794\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11865,\"page_url\":\"https:\\/\\/247sports.com\\/player\\/tom-brady-76179\\/\",\"page_url_hash\":\"b18a144a7b5de4a94cc57c64346ccf2f\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false},{\"id\":11864,\"page_url\":\"https:\\/\\/1033thegoat.com\\/tom-brady-has-won-more-super-bowls-than-these-18-teams-combined\\/\",\"page_url_hash\":\"4d05356e44f08caf9bda3a7667d4f1aa\",\"created_at\":\"2023-06-24T21:21:46.000000Z\",\"updated_at\":\"2023-06-24 21:21:46\",\"crawl_status\":\"queued\",\"index_status\":\"queued\",\"is_file\":false}],\"first_page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/510\\/pages?page=1\",\"from\":1,\"last_page\":1,\"last_page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/510\\/pages?page=1\",\"next_page_url\":null,\"path\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/510\\/pages\",\"per_page\":20,\"prev_page_url\":null,\"to\":10,\"total\":10}},\"status\":\"success\"}\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/List_all_projects_for_an_account_with_pagination.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**List all projects for an account with pagination**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "page_1 = requests.request('GET', url, headers=headers)\n",
        "print(page_1.text)\n",
        "page_2 = requests.request('GET', url, headers=headers, params={\"page\": 2})\n",
        "print(page_2.text)\n",
        "page_3 = requests.request('GET', url, headers=headers, params={\"page\": 3})\n",
        "print(page_3.text)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Reindex_page_of_a_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**List all pages of a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Pages**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Update the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages'\n",
        "\n",
        "project_pages = requests.request('GET', url, headers=headers)\n",
        "print(project_pages.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Reindex a page of project**"
      ],
      "metadata": {
        "id": "I50Ltd6q0Z5x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "page_id = json.loads(project_pages.text)['data']['pages']['data'][0]['id']\n",
        "# Reindex the project page\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/pages' + f\"/{page_id}/reindex\"\n",
        "\n",
        "project_pages = requests.request('POST', url, headers=headers)\n",
        "print(project_pages.text)"
      ],
      "metadata": {
        "id": "lI2MC36b0fDT"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Retrieve_messages_for_a_conversation.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Get all conversation messages**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "00d3c765-2cdc-4ca8-959a-5c7d1d8adb09"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":529,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-25T17:00:30.000000Z\",\"updated_at\":\"2023-06-25T17:00:30.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Project Conversation**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Get the project settings\n",
        "name = 'Test Converasation'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"name\": project_name\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/conversations'\n",
        "\n",
        "create_conversation = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0f18c9b-2433-4513-d4bd-5b59b5797256"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"project_id\":529,\"name\":\"Example ChatBot using Sitemap\",\"created_by\":35,\"session_id\":\"1198da61-8412-4711-9cd5-4f288f58fc24\",\"updated_at\":\"2023-06-25T17:00:31.000000Z\",\"created_at\":\"2023-06-25T17:00:31.000000Z\",\"id\":219},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to conversation stream True**"
      ],
      "metadata": {
        "id": "_yGXSwRbP6qi"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "-FXUfq-i1WLr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f2531d6-06fb-411c-e31c-102bbc7a93fb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting sseclient-py\n",
            "  Downloading sseclient_py-1.7.2-py2.py3-none-any.whl (8.4 kB)\n",
            "Installing collected packages: sseclient-py\n",
            "Successfully installed sseclient-py-1.7.2\n"
          ]
        }
      ],
      "source": [
        "# for streaming response import SSE Client\n",
        "!pip install sseclient-py\n",
        "\n",
        "from sseclient import SSEClient"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 1\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "\n",
        "headers[\"Accept\"] = \"text/event-stream\"\n",
        "\n",
        "stream_response = requests.post(url, stream=True, headers=headers, data=payload)\n",
        "client = SSEClient(stream_response)\n",
        "for event in client.events():\n",
        "    print(event.data)"
      ],
      "metadata": {
        "id": "0xnMN8tQUQXj"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to conversation stream False**"
      ],
      "metadata": {
        "id": "TSuIaZjbeUGu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom\"\n",
        "\n",
        "# set stream to 1 to get a streaming response\n",
        "stream = 0\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "payload = json.dumps({\n",
        "    \"prompt\": prompt,\n",
        "    \"stream\": stream\n",
        "})\n",
        "non_stream_response = requests.post(url, stream=False, headers=headers, data=payload)\n",
        "print(non_stream_response.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dcwzbnn1eaIX",
        "outputId": "07189549-324a-4fff-922e-dc316a568d18"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":431,\"created_at\":\"2023-06-25T17:01:11.000000Z\",\"updated_at\":\"2023-06-25T17:01:11.000000Z\",\"user_id\":35,\"user_query\":\"Who is Tom\",\"openai_response\":\"Tom Brady is a quarterback who played for Tampa Bay. He has recently announced his retirement.\",\"citations\":[\"12061.0\",\"12055.0\",\"12054.0\",\"12062.0\",\"12057.0\"]},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get all messages from conversation**"
      ],
      "metadata": {
        "id": "JA6xFl9mfeJl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'\n",
        "\n",
        "project_messages = requests.request('GET', url, headers=headers)\n",
        "print(project_messages.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tN5JPHbkfd1F",
        "outputId": "ec3101dc-ca0c-4d90-923d-6b77588504dd"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"conversation\":{\"id\":219,\"created_at\":\"2023-06-25T17:00:31.000000Z\",\"updated_at\":\"2023-06-25T17:00:31.000000Z\",\"session_id\":\"1198da61-8412-4711-9cd5-4f288f58fc24\",\"project_id\":529,\"created_by\":35,\"name\":\"Example ChatBot using Sitemap\"},\"messages\":{\"current_page\":1,\"data\":[{\"id\":431,\"created_at\":\"25 Jun 2023 05:01:11\",\"updated_at\":\"25 Jun 2023 05:01:11\",\"user_id\":35,\"user_query\":\"Who is Tom\",\"openai_response\":\"Tom Brady is a quarterback who played for Tampa Bay. He has recently announced his retirement.\",\"citations\":[\"12061.0\",\"12055.0\",\"12054.0\",\"12062.0\",\"12057.0\"]}],\"first_page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/529\\/conversations\\/1198da61-8412-4711-9cd5-4f288f58fc24\\/messages?page=1\",\"from\":1,\"last_page\":1,\"last_page_url\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/529\\/conversations\\/1198da61-8412-4711-9cd5-4f288f58fc24\\/messages?page=1\",\"next_page_url\":null,\"path\":\"https:\\/\\/dev.customgpt.ai\\/api\\/v1\\/projects\\/529\\/conversations\\/1198da61-8412-4711-9cd5-4f288f58fc24\\/messages\",\"per_page\":20,\"prev_page_url\":null,\"to\":1,\"total\":1}},\"status\":\"success\"}\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}

```

Contents of examples/SDK_Add_a_FIle_to_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Initialize Client**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**Create a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a sitemap source**"
      ],
      "metadata": {
        "id": "43a91gPXiOou"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "from google.colab import files\n",
        "from customgpt_client.types import File\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "\n",
        "# Create another source for project add a sitemap\n",
        "create_source = CustomGPT.Source.create(project_id=project_id, file=File(payload=file_content, file_name='Test'))\n",
        "print(create_source)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Add_a_Sitemap_to_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Initialize Client**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**Create a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a sitemap source**"
      ],
      "metadata": {
        "id": "43a91gPXiOou"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "\n",
        "# Create another source for project add a sitemap\n",
        "create_source = CustomGPT.Source.create(project_id=project_id, sitemap_path=sitemap_path)\n",
        "print(create_source)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Create_Bot_By_Sitemap.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "\n",
        "# Check if chat bot is active using `is_chat_active` flag in project detail response\n",
        "# GET project details\n",
        "get_project = CustomGPT.Project.get(project_id=project_id)\n",
        "project_data = get_project.parsed\n",
        "is_chat_active = project_data.data.is_chat_active\n",
        "\n",
        "print(is_chat_active)\n",
        "\n",
        "# One can poll this GET project details API to check if chat bot is active before starting a conversation\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a conversation to send message to**"
      ],
      "metadata": {
        "id": "AMTHdtSsFedz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZnAs_Bhe1WLr"
      },
      "outputs": [],
      "source": [
        "# Create a conversation before sending a message to the chat bot\n",
        "project_conversataion = CustomGPT.Conversation.create(project_id=project_id, name=\"My First Conversation\")\n",
        "project_data = project_conversataion.parsed\n",
        "print(project_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send a message with streaming False**"
      ],
      "metadata": {
        "id": "ybFNNqkTSLVS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B4gnIWk31WLs"
      },
      "outputs": [],
      "source": [
        "session_id = project_data.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom Brady\"\n",
        "\n",
        "stream_response = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt, stream=False)\n",
        "print(stream_response)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send a message with streaming True**"
      ],
      "metadata": {
        "id": "F3DGWGQbSOZU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "session_id = project_data.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom Brady\"\n",
        "\n",
        "stream_response = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt, stream=True)\n",
        "for event in stream_response.events():\n",
        "  print(event.data)"
      ],
      "metadata": {
        "id": "FJSmijEUDA8e"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Create_a_new_conversation_and_send_a_message_to_the_conversation.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Initialize Client**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**Create a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "\n",
        "# Check if chat bot is active using `is_chat_active` flag in project detail response\n",
        "# GET project details\n",
        "get_project = CustomGPT.Project.get(project_id=project_id)\n",
        "project_data = get_project.parsed\n",
        "is_chat_active = project_data.data.is_chat_active\n",
        "\n",
        "print(is_chat_active)\n",
        "\n",
        "# One can poll this GET project details API to check if chat bot is active before starting a conversation\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZnAs_Bhe1WLr"
      },
      "outputs": [],
      "source": [
        "# Create a conversation before sending a message to the chat bot\n",
        "project_conversataion = CustomGPT.Conversation.create(project_id=project_id, name=\"My First Conversation\")\n",
        "project_data = project_conversataion.parsed\n",
        "print(project_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to chatbot without stream**"
      ],
      "metadata": {
        "id": "37aRWFa4qjeJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B4gnIWk31WLs"
      },
      "outputs": [],
      "source": [
        "session_id = project_data.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom Brady\"\n",
        "\n",
        "stream_response = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt, stream=False)\n",
        "print(stream_response)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send Message and stream result**"
      ],
      "metadata": {
        "id": "qIXJiXtLebuv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "session_id = project_data.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom Brady\"\n",
        "\n",
        "stream_response = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt, custom_persona=\"You are a custom chatbot assistant called *Story Teller*, a friendly story teller who works for Test and answers questions based on the given context. Be as helpful as possible. Always prioritize the customer. Escalate complex issues. Stay on topic. Use appropriate language, Acknowledge limitations.\", stream=True)\n",
        "for event in stream_response.events():\n",
        "  print(event.data)"
      ],
      "metadata": {
        "id": "FJSmijEUDA8e"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Create_bot_from_file.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_KEY\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a file**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "from google.colab import files\n",
        "from customgpt_client.types import File\n",
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "print(file_content)\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, file=File(payload=file_content, file_name='Yes.doc'))\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Fetch Project Details to check is chatbot is active**"
      ],
      "metadata": {
        "id": "W-OV8uLuMUyk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "\n",
        "# Check if chat bot is active using `is_chat_active` flag in project detail response\n",
        "# GET project details\n",
        "get_project = CustomGPT.Project.get(project_id=project_id)\n",
        "project_data = get_project.parsed\n",
        "is_chat_active = project_data.data.is_chat_active\n",
        "\n",
        "print(is_chat_active)\n",
        "\n",
        "# One can poll this GET project details API to check if chat bot is active before starting a conversation\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a conversation to send a message a to**"
      ],
      "metadata": {
        "id": "2XYGpAzGMlPC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZnAs_Bhe1WLr"
      },
      "outputs": [],
      "source": [
        "# Create a conversation before sending a message to the chat bot\n",
        "project_conversataion = CustomGPT.Conversation.create(project_id=project_id, name=\"My First Conversation\")\n",
        "project_data = project_conversataion.parsed\n",
        "print(project_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send a message to chatbot**"
      ],
      "metadata": {
        "id": "wnPkFcpMMrF0"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B4gnIWk31WLs"
      },
      "outputs": [],
      "source": [
        "session_id = project_data.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who do you work for and what are you called and who is vanka in 10 words.\"\n",
        "\n",
        "stream_response = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt, custom_persona=\"You are a custom chatbot assistant called *Story Teller*, a friendly story teller who works for Test and answers questions based on the given context. Be as helpful as possible. Always prioritize the customer. Escalate complex issues. Stay on topic. Use appropriate language, Acknowledge limitations.\", stream=True)\n",
        "for event in stream_response.events():\n",
        "    print(event.data)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Delete_a_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Delete a Project**"
      ],
      "metadata": {
        "id": "JgXAwGsFavRE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "# to make the chatbot sharable we will set is_shared to 1\n",
        "project_deleted = CustomGPT.Project.delete(project_id=project_id)\n",
        "print(project_deleted)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Delete_a_project_page.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Add conversation to fill in pages**"
      ],
      "metadata": {
        "id": "JgXAwGsFavRE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "# to make the chatbot sharable we will set is_shared to 1\n",
        "project_conversation = CustomGPT.Conversation.create(project_id=project_id, name='conversation')\n",
        "print(project_conversation)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Delete Project Page**"
      ],
      "metadata": {
        "id": "DYDQmEzvanvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_pages = CustomGPT.Page.get(project_id=project_id)\n",
        "page_id = project_pages.parsed.data.pages.data[0].id\n",
        "print(page_id)\n",
        "delete_page = CustomGPT.Page.delete(page_id=page_id, project_id=project_id)\n",
        "print(delete_page)"
      ],
      "metadata": {
        "id": "ptvLSyBIambC"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_GetPageMetadata.ipynb:
```
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eZWXtZ0nfAoA"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Configure CustomGPT**"
      ],
      "metadata": {
        "id": "KypGOfYUfIR9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_KEY\""
      ],
      "metadata": {
        "id": "6l-_SXCKfQ6q"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a Chatbot**"
      ],
      "metadata": {
        "id": "b4Zh1NvwfUx0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "from customgpt_client.types import File\n",
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "print(file_content)\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, file=File(payload=file_content, file_name='Yes.doc'))\n",
        "print(create_project)"
      ],
      "metadata": {
        "id": "AGD7EdMYgXUD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get a project page**"
      ],
      "metadata": {
        "id": "_fQc28ICgbZ6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "project_page = CustomGPT.Page.get(project_id=project_id)\n",
        "data = project_page.parsed.data\n",
        "print(data)\n",
        "page_id = data.pages.data[0].id\n",
        "print(page_id)"
      ],
      "metadata": {
        "id": "iE7Urhq7g06t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get page metadata**"
      ],
      "metadata": {
        "id": "2HMP-W40jXH-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "page_metadata = CustomGPT.PageMetadata.get(project_id=project_id, page_id=page_id)\n",
        "data = page_metadata.parsed.data\n",
        "print(data)\n",
        "print(data.title)"
      ],
      "metadata": {
        "id": "bJYqBzHdiFHv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update Project Metadata**"
      ],
      "metadata": {
        "id": "PxWvN0yAoaWU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "page_metadata = CustomGPT.PageMetadata.update(project_id=project_id, page_id=page_id, title='Vanka')\n",
        "data = page_metadata.parsed.data\n",
        "print(data)"
      ],
      "metadata": {
        "id": "m6axeH_KoeSC"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
```

Contents of examples/SDK_Get_Citation_Details.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Initialize Client**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**Create a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a conversation**"
      ],
      "metadata": {
        "id": "43a91gPXiOou"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "# Create conversation\n",
        "create_conversation = CustomGPT.Conversation.create(project_id=project_id, name='Test')\n",
        "print(create_conversation)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to conversation**"
      ],
      "metadata": {
        "id": "3lWDBvw-wuzL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "session_id = create_conversation.parsed.data.session_id\n",
        "# Create a message to the above conversation\n",
        "prompt=\"Who is Tom Brady in 10 words\"\n",
        "send_conversation = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt)\n",
        "print(send_conversation)\n"
      ],
      "metadata": {
        "id": "JULBvcaGw4uN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get one of the citation from message response**"
      ],
      "metadata": {
        "id": "Do654B7CxTo_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "citation_id = send_conversation.parsed.data.citations[0]\n",
        "citation = CustomGPT.Citation.get(project_id=project_id, citation_id=citation_id)\n",
        "print(citation)"
      ],
      "metadata": {
        "id": "rOECvvyDxWZ_"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Get_Project_Stats.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Stats**"
      ],
      "metadata": {
        "id": "DYDQmEzvanvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "project_stats= CustomGPT.Project.stats(project_id=project_id)\n",
        "print(project_stats)"
      ],
      "metadata": {
        "id": "ptvLSyBIambC"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Get_settings_for_a_particular_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Settings**"
      ],
      "metadata": {
        "id": "DYDQmEzvanvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "project_settings = CustomGPT.ProjectSettings.get(project_id=project_id)\n",
        "print(project_settings)\n"
      ],
      "metadata": {
        "id": "ptvLSyBIambC"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_List_all_pages_belonging_to_a_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Add conversation to fill in pages**"
      ],
      "metadata": {
        "id": "JgXAwGsFavRE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "# to make the chatbot sharable we will set is_shared to 1\n",
        "project_conversation = CustomGPT.Conversation.create(project_id=project_id, name='conversation')\n",
        "print(project_conversation)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Page**"
      ],
      "metadata": {
        "id": "DYDQmEzvanvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_pages = CustomGPT.Page.get(project_id=project_id)\n",
        "print(project_pages)"
      ],
      "metadata": {
        "id": "ptvLSyBIambC"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_List_all_projects_using_pagination.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "from google.colab import files\n",
        "from customgpt_client.types import File\n",
        "from io import BytesIO\n",
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, file=File(payload=file_content, file_name='Yes'))\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get total pages from first request and loop to get all pages of user**"
      ],
      "metadata": {
        "id": "1_c0DAtqLihA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "import time\n",
        "project_page = CustomGPT.Project.list()\n",
        "print(project_page)\n",
        "data = project_page.parsed.data.data\n",
        "total = project_page.parsed.data.total\n",
        "for i in range(total):\n",
        "  page = i + 1\n",
        "  list_page = CustomGPT.Project.list(page=page)\n",
        "  print(list_page)\n",
        "  data.append(project_page.parsed.data.data)\n",
        "  time.sleep(5)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Reindex_page_belonging_to_a_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ec5cee9-7c46-465f-d26c-4d083db8b2ac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting customgpt-client\n",
            "  Downloading customgpt_client-1.1.6-py3-none-any.whl (482 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m482.2/482.2 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: attrs>=21.3.0 in /usr/local/lib/python3.10/dist-packages (from customgpt-client) (23.1.0)\n",
            "Requirement already satisfied: python-dateutil<3.0.0,>=2.8.0 in /usr/local/lib/python3.10/dist-packages (from customgpt-client) (2.8.2)\n",
            "Collecting requests==2.31.0 (from customgpt-client)\n",
            "  Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.6/62.6 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting sseclient-py==1.7.2 (from customgpt-client)\n",
            "  Downloading sseclient_py-1.7.2-py2.py3-none-any.whl (8.4 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->customgpt-client) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->customgpt-client) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->customgpt-client) (1.26.16)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->customgpt-client) (2023.7.22)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil<3.0.0,>=2.8.0->customgpt-client) (1.16.0)\n",
            "Installing collected packages: sseclient-py, requests, customgpt-client\n",
            "  Attempting uninstall: requests\n",
            "    Found existing installation: requests 2.27.1\n",
            "    Uninstalling requests-2.27.1:\n",
            "      Successfully uninstalled requests-2.27.1\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "google-colab 1.0.0 requires requests==2.27.1, but you have requests 2.31.0 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed customgpt-client-1.1.6 requests-2.31.0 sseclient-py-1.7.2\n"
          ]
        }
      ],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Add conversation to fill in pages**"
      ],
      "metadata": {
        "id": "JgXAwGsFavRE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "# to make the chatbot sharable we will set is_shared to 1\n",
        "project_conversation = CustomGPT.Conversation.create(project_id=project_id, name='conversation')\n",
        "print(project_conversation)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project Page**"
      ],
      "metadata": {
        "id": "DYDQmEzvanvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_pages = CustomGPT.Page.get(project_id=project_id)\n",
        "page_id = project_pages.parsed.data.pages.data[0].id\n",
        "print(project_pages)"
      ],
      "metadata": {
        "id": "ptvLSyBIambC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Reindex Project Page**"
      ],
      "metadata": {
        "id": "eKgFWLtW2e6m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reindenx_pages = CustomGPT.Page.reindex(project_id=project_id, page_id=page_id)\n",
        "print(reindenx_pages.parsed.data.updated)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RqdkSD_r2ht0",
        "outputId": "a1999e74-756a-4dff-8902-e3703a93d41d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Retrieve_Messages_of_conversation.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Initialize Client**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**Create a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a conversation**"
      ],
      "metadata": {
        "id": "43a91gPXiOou"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "# Create conversation\n",
        "create_conversation = CustomGPT.Conversation.create(project_id=project_id, name='Test')\n",
        "print(create_conversation)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Send message to conversation**"
      ],
      "metadata": {
        "id": "3lWDBvw-wuzL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "session_id = create_conversation.parsed.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "# pass in your question to prompt\n",
        "prompt = \"Who is Tom Bradyin 10 words\"\n",
        "\n",
        "stream_response = CustomGPT.Conversation.send(project_id=project_id, session_id=session_id, prompt=prompt, stream=False)\n",
        "print(stream_response)\n"
      ],
      "metadata": {
        "id": "JULBvcaGw4uN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Retrieve messages**"
      ],
      "metadata": {
        "id": "Do654B7CxTo_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "messages = CustomGPT.Conversation.messages(project_id=project_id, session_id=session_id)\n",
        "print(messages)"
      ],
      "metadata": {
        "id": "rOECvvyDxWZ_"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Update_Delete_a_conversation.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install customgpt-client"
      ],
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Initialize Client**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**Create a project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a conversation**"
      ],
      "metadata": {
        "id": "43a91gPXiOou"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = create_project.parsed.data\n",
        "\n",
        "# Get project id from response for created project\n",
        "project_id = data.id\n",
        "# Create conversation\n",
        "create_conversation = CustomGPT.Conversation.create(project_id=project_id, name='Test')\n",
        "print(create_conversation)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update a conversation**"
      ],
      "metadata": {
        "id": "3lWDBvw-wuzL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "session_id = create_conversation.parsed.data.session_id\n",
        "# Create a message to the above conversation\n",
        "\n",
        "update_conversation = CustomGPT.Conversation.update(project_id=project_id, session_id=session_id, name=\"Test 2\")\n",
        "print(update_conversation)\n"
      ],
      "metadata": {
        "id": "JULBvcaGw4uN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Delete a conversation**"
      ],
      "metadata": {
        "id": "Do654B7CxTo_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "delete_conversation = CustomGPT.Conversation.delete(project_id=project_id, session_id=session_id)\n",
        "print(delete_conversation)"
      ],
      "metadata": {
        "id": "rOECvvyDxWZ_"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Update_a_project_name.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "from google.colab import files\n",
        "from customgpt_client.types import File\n",
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, file=File(payload=file_content, file_name='Yes'))\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "# previously name was set to Example ChatBot using Sitemap we will change it file\n",
        "update_project = CustomGPT.Project.update(project_id=project_id, project_name='Example ChatBot using file')\n",
        "print(update_project.parsed.data.project_name)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Update_project_settings.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project settings**"
      ],
      "metadata": {
        "id": "JgXAwGsFavRE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "project_setting = CustomGPT.ProjectSettings.get(project_id=project_id)\n",
        "print(project_setting)"
      ],
      "metadata": {
        "id": "ptvLSyBIambC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update Project Settings**"
      ],
      "metadata": {
        "id": "uG1qGrYuEr9_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "from customgpt_client.types import File\n",
        "chatbot_avatar = files.upload()\n",
        "file_content_avatar = next(iter(chatbot_avatar.values()))\n",
        "chatbot_background = files.upload()\n",
        "file_content_bg = next(iter(chatbot_background.values()))\n",
        "default_prompt = 'Ask away'\n",
        "example_questions = ['post', 'post2']\n",
        "chatbot_msg_lang = 'ur'\n",
        "update_project_setting = CustomGPT.ProjectSettings.update(project_id=project_id, chat_bot_avatar=File(payload=file_content_avatar, file_name='Yes'), chat_bot_bg=File(payload=file_content_bg, file_name='test'), default_prompt=default_prompt, example_questions=example_questions, chatbot_msg_lang=chatbot_msg_lang)\n",
        "print(update_project_setting)"
      ],
      "metadata": {
        "id": "F2_m9gmjEro-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Check Project Settings update**"
      ],
      "metadata": {
        "id": "QL2nBEDgHSBV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "project_setting = CustomGPT.ProjectSettings.get(project_id=project_id)\n",
        "print(project_setting)"
      ],
      "metadata": {
        "id": "Ly6EVJhKHWwU"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/SDK_Update_project_sharing_and_get_project_share_link,_embed_code_and_chat_js_code.ipynb:
```
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cMS4FTgtE0s1"
      },
      "outputs": [],
      "source": [
        "!pip install customgpt-client"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Create your custom chat bot using a sitemap.**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "from customgpt_client import CustomGPT\n",
        "CustomGPT.api_key = \"YOUR_API_TOKEN\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1ISHsxb1WLo"
      },
      "source": [
        "**An example for to create a project with a sitemap**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp"
      },
      "outputs": [],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "create_project = CustomGPT.Project.create(project_name=project_name, sitemap_path=sitemap_path)\n",
        "print(create_project)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get share link, embed code and live chat**"
      ],
      "metadata": {
        "id": "xChUCFDII_qW"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D1La0GFc1WLq"
      },
      "outputs": [],
      "source": [
        "project_id = create_project.parsed.data.id\n",
        "# to make the chatbot sharable we will set is_shared to 1\n",
        "\n",
        "update_project = CustomGPT.Project.update(project_id=project_id, is_shared=1)\n",
        "print(update_project)\n",
        "\n",
        "print('Share Link')\n",
        "print(update_project.parsed.data.shareable_link)\n",
        "print('Embed Code')\n",
        "print(update_project.parsed.data.embed_code)\n",
        "print('Live Chat Code')\n",
        "print(update_project.parsed.data.live_chat_code)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Update a project name.ipynb:
```
{"cells":[{"cell_type":"markdown","metadata":{"id":"PAWpaaSa1WLi"},"source":["**Update a project name**\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"Hc9SsdoR1WLm","executionInfo":{"status":"ok","timestamp":1687640131624,"user_tz":-300,"elapsed":9,"user":{"displayName":"Hamza Shams","userId":"11451716663856828637"}}},"outputs":[],"source":["# setup API URL and API Token\n","api_endpoint = 'https://app.customgpt.ai/api/v1/'\n","api_token = 'ADD_YOUR_API_TOKEN_HERE'\n","\n","headers = {\n","    'Content-type': 'application/json',\n","    'Authorization': 'Bearer ' + api_token\n","}\n","# imports\n","import requests\n","import json"]},{"cell_type":"markdown","source":["**Create a project for the account**"],"metadata":{"id":"SDGeV1BbMTmS"}},{"cell_type":"code","execution_count":5,"metadata":{"id":"PNbGtm_A1WLp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1687640137703,"user_tz":-300,"elapsed":759,"user":{"displayName":"Hamza Shams","userId":"11451716663856828637"}},"outputId":"acf0d019-4482-4245-ba9f-e44c7efe4a88"},"outputs":[{"output_type":"stream","name":"stdout","text":["{\"data\":{\"id\":507,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-24T20:55:36.000000Z\",\"updated_at\":\"2023-06-24T20:55:36.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"]}],"source":["# Give a name to your project\n","project_name = 'Example ChatBot using Sitemap'\n","sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n","\n","payload = json.dumps({\n","    \"project_name\": project_name,\n","    \"sitemap_path\": sitemap_path\n","})\n","\n","url = api_endpoint + 'projects'\n","\n","create_project = requests.request('POST', url, headers=headers, data=payload)\n","print(create_project.text)"]},{"cell_type":"code","source":["# Check status of the project if chat bot is active\n","data = json.loads(create_project.text)[\"data\"]\n","\n","# Get project id from response for created project\n","updated_project_name = 'New Example ChatBot using Sitemap'\n","project_id = data[\"id\"]\n","payload = json.dumps({\n","    \"project_name\": updated_project_name\n","})\n","# Update the project\n","url = api_endpoint + 'projects' + f\"/{project_id}\"\n","\n","create_project = requests.request('POST', url, headers=headers, data=payload)\n","print(create_project.text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uoCUM2FdMR-V","executionInfo":{"status":"ok","timestamp":1687640423753,"user_tz":-300,"elapsed":8,"user":{"displayName":"Hamza Shams","userId":"11451716663856828637"}},"outputId":"64bb7136-662c-4d52-f5c2-f885ee267387"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["{\"data\":{\"id\":507,\"project_name\":\"New Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":1,\"created_at\":\"2023-06-24T20:55:36.000000Z\",\"updated_at\":\"2023-06-24T21:00:23.000000Z\",\"is_shared\":0,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"g7VqloUVMuQJ","executionInfo":{"status":"ok","timestamp":1687640271618,"user_tz":-300,"elapsed":5,"user":{"displayName":"Hamza Shams","userId":"11451716663856828637"}}},"execution_count":7,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.2"},"orig_nbformat":4,"colab":{"provenance":[{"file_id":"1DiuGRGbJbJojOq51ZqcBk9S2IsGnUJbf","timestamp":1687639959061},{"file_id":"1QImlSVO-grfmY9aQmM9SxlLpJMGTvwnx","timestamp":1687639487526},{"file_id":"1pm9_zrExRnUWtRj71Glv2LTfffloU8cj","timestamp":1687634350565}]}},"nbformat":4,"nbformat_minor":0}
```

Contents of examples/Update_Delete_a_conversation.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Update/Delete a conversation**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a587e6e-222f-4cc2-f84c-b5e5d515a496"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":532,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-25T17:23:34.000000Z\",\"updated_at\":\"2023-06-25T17:23:34.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Project Conversation**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Get the project settings\n",
        "name = 'Test Converasation'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"name\": project_name\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/conversations'\n",
        "\n",
        "create_conversation = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_conversation.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d849a801-fd1a-40b8-98b1-f7b39c9fd8e1"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"project_id\":532,\"name\":\"Example ChatBot using Sitemap\",\"created_by\":35,\"session_id\":\"8ff8078b-3e88-4ad1-8e3f-9a37324964af\",\"updated_at\":\"2023-06-25T17:23:34.000000Z\",\"created_at\":\"2023-06-25T17:23:34.000000Z\",\"id\":222},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update a conversation name**\n",
        "\n"
      ],
      "metadata": {
        "id": "_yGXSwRbP6qi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a message to the above conversation\n",
        "conversation_data = json.loads(create_conversation.text)[\"data\"]\n",
        "\n",
        "# session_id is important to maintain chat history\n",
        "session_id = conversation_data[\"session_id\"]\n",
        "\n",
        "# pass in your question to prompt\n",
        "name = \"Who is Tom\"\n",
        "\n",
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id)\n",
        "payload = json.dumps({\n",
        "    \"name\": name\n",
        "})\n",
        "update_conversation_response = requests.put(url, headers=headers, data=payload)\n",
        "print(update_conversation_response.text)"
      ],
      "metadata": {
        "id": "0xnMN8tQUQXj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d18aa18b-1e3d-4a6a-e463-ac04c826b4ee"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":222,\"created_at\":\"2023-06-25T17:23:34.000000Z\",\"updated_at\":\"2023-06-25T17:24:41.000000Z\",\"session_id\":\"8ff8078b-3e88-4ad1-8e3f-9a37324964af\",\"project_id\":532,\"created_by\":35,\"name\":\"Who is Tom\"},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Delete a conversation**\n"
      ],
      "metadata": {
        "id": "TSuIaZjbeUGu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id)\n",
        "payload = json.dumps({\n",
        "    \"name\": name\n",
        "})\n",
        "delete_conversation_response = requests.delete(url, headers=headers)\n",
        "print(delete_conversation_response.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fB8eqoeslHZ5",
        "outputId": "53010079-7ba3-46ea-d235-c51e3ee01adb"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"deleted\":true},\"status\":\"success\"}\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Update_project_sharing_and_get_project_share_link,_embed_code_and_chat_js_code.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Update project sharing and get project share link, embed code and chat.js code**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7924059c-5cf1-41f0-953f-c622df889524"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":508,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-24T21:08:58.000000Z\",\"updated_at\":\"2023-06-24T21:08:58.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update project sharing status**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "payload = json.dumps({\n",
        "    \"is_shared\": True\n",
        "})\n",
        "# Update the project\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\"\n",
        "\n",
        "update_project = requests.request('POST', url, headers=headers, data=payload)\n"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Share Link, embed code and livechat**\n"
      ],
      "metadata": {
        "id": "0EnOjit4O4XU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check status of the project if chat bot is active\n",
        "data = json.loads(update_project.text)[\"data\"]\n",
        "share_link = data['shareable_link']\n",
        "print('Share Link')\n",
        "print(share_link)\n",
        "embed_code = data['embed_code']\n",
        "print('Embed Code')\n",
        "print(embed_code)\n",
        "live_chat_code = data['live_chat_code']\n",
        "print('Live Chat Code')\n",
        "print(live_chat_code)"
      ],
      "metadata": {
        "id": "g7VqloUVMuQJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca5c296a-f69d-429f-d2f6-7e17d32f41b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Share Link\n",
            "https://dev.customgpt.ai/api/v1/projects/508/conversations?shareable_slug=4f5293ab51ff008006c4ba33cfc6c8fb\n",
            "Embed Code\n",
            "<div id='customgpt_chat'></div><script div_id='customgpt_chat' p_key='508' p_key='4f5293ab51ff008006c4ba33cfc6c8fb' src='https://cdn.customgpt.ai/js/embed.js' width='400'></script>\n",
            "Live Chat Code\n",
            "<script src='https://cdn.customgpt.ai/js/chat.js'></script><script>window.onload = function () { CustomGPT.init({ p_id: '508', p_key: '4f5293ab51ff008006c4ba33cfc6c8fb' }); };</script>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZrQhz8F0PCyE"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of examples/Update_settings_for_a_particular_project.ipynb:
```
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PAWpaaSa1WLi"
      },
      "source": [
        "**Update settings for a particular project**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Hc9SsdoR1WLm"
      },
      "outputs": [],
      "source": [
        "# setup API URL and API Token\n",
        "api_endpoint = 'https://app.customgpt.ai/api/v1/'\n",
        "api_token = 'ADD_YOUR_API_TOKEN_HERE'\n",
        "\n",
        "headers = {\n",
        "    'Content-type': 'application/json',\n",
        "    'Authorization': 'Bearer ' + api_token\n",
        "}\n",
        "# imports\n",
        "import requests\n",
        "import json"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a project for the account**"
      ],
      "metadata": {
        "id": "SDGeV1BbMTmS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "PNbGtm_A1WLp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "71f81055-9e5c-4594-df73-2fa3d110d250"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"id\":527,\"project_name\":\"Example ChatBot using Sitemap\",\"sitemap_path\":null,\"user_id\":35,\"is_chat_active\":null,\"created_at\":\"2023-06-25T13:17:26.000000Z\",\"updated_at\":\"2023-06-25T13:17:26.000000Z\",\"is_shared\":null,\"deleted_at\":null,\"type\":\"SITEMAP\"},\"status\":\"success\"}\n"
          ]
        }
      ],
      "source": [
        "# Give a name to your project\n",
        "project_name = 'Example ChatBot using Sitemap'\n",
        "sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'\n",
        "\n",
        "payload = json.dumps({\n",
        "    \"project_name\": project_name,\n",
        "    \"sitemap_path\": sitemap_path\n",
        "})\n",
        "\n",
        "url = api_endpoint + 'projects'\n",
        "\n",
        "create_project = requests.request('POST', url, headers=headers, data=payload)\n",
        "print(create_project.text)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Get Project settings**\n"
      ],
      "metadata": {
        "id": "3f0Raa_UOquJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = json.loads(create_project.text)[\"data\"]\n",
        "project_id = data[\"id\"]\n",
        "# Get the project settings\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/settings'\n",
        "\n",
        "project_settings = requests.request('GET', url, headers=headers)\n",
        "print(project_settings.text)"
      ],
      "metadata": {
        "id": "uoCUM2FdMR-V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ecf8ba9-3f10-426a-f79f-a37c206b0f85"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\":{\"chatbot_avatar\":\"\",\"chatbot_background\":\"\",\"default_prompt\":\"Ask Me Anything ...\",\"example_questions\":null,\"response_source\":\"default\",\"chatbot_msg_lang\":\"en\",\"remove_branding\":false},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Update Project Settings**"
      ],
      "metadata": {
        "id": "_yGXSwRbP6qi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "if 'Content-type' in headers.keys():\n",
        "  del headers['Content-type']\n",
        "# Give a name to your project\n",
        "default_prompt = 'Example ChatBot using Sitemap'\n",
        "\n",
        "uploaded_file = files.upload()\n",
        "file_content = next(iter(uploaded_file.values()))\n",
        "chatbot_avatar_binary = file_content\n",
        "\n",
        "uploaded_file_2 = files.upload()\n",
        "file_content_2 = next(iter(uploaded_file_2.values()))\n",
        "chatbot_background_binary = file_content_2\n",
        "\n",
        "payload = {\n",
        "    \"chat_bot_avatar\": chatbot_avatar_binary,\n",
        "    \"chat_bot_bg\":chatbot_background_binary,\n",
        "    \"default_prompt\": (None, default_prompt),\n",
        "    \"example_questions[0]\": (None, 'Test1'),\n",
        "    \"example_questions[1]\": (None, 'Test2'),\n",
        "    \"response_source\": (None, \"default\"),\n",
        "    \"chatbot_msg_lang\": (None, \"ur\")\n",
        "}\n",
        "\n",
        "url = api_endpoint + 'projects' + f'/{project_id}' + '/settings'\n",
        "\n",
        "update_project_settings = requests.request('POST', url, headers=headers, files=payload)\n",
        "print(update_project_settings.text)\n",
        "\n",
        "url = api_endpoint + 'projects' + f\"/{project_id}\" + '/settings'\n",
        "\n",
        "project_settings = requests.request('GET', url, headers=headers)\n",
        "print(project_settings.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "id": "Ewduqi5cPTOm",
        "outputId": "6d2986c5-516e-4919-e4f0-2c782970a8a0"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8616e443-b7bd-4ce2-a878-5870c9392450\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8616e443-b7bd-4ce2-a878-5870c9392450\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving larance roberts.jpg to larance roberts (40).jpg\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-08ef611e-cabc-4609-979e-bdb40ac7a38c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-08ef611e-cabc-4609-979e-bdb40ac7a38c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving larance roberts.jpg to larance roberts (41).jpg\n",
            "{\"data\":{\"updated\":true},\"status\":\"success\"}\n",
            "{\"data\":{\"chatbot_avatar\":\"https:\\/\\/dev.customgpt.ai\\/storage\\/chat_bot_avatar\\/fiq402La9jltbG98i6ESPysF1WBGJ94KWPC4CwKs.jpg\",\"chatbot_background\":\"https:\\/\\/dev.customgpt.ai\\/storage\\/chat_bot_bg\\/kyWeVd9qIFNgwswsK99PdYjgePFfHichEar7Ll9I.jpg\",\"default_prompt\":\"Example ChatBot using Sitemap\",\"example_questions\":[\"Test1\",\"Test2\"],\"response_source\":\"default\",\"chatbot_msg_lang\":\"ur\",\"remove_branding\":0},\"status\":\"success\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0xnMN8tQUQXj"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.2"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
```

Contents of personas/README.md:
```
# CustomGPT Personas
Examples and recipes for using the CustomGPT Persona feature. This feature lets you create custom instructions for your ChatGPT-4 powered CustomGPT chatbot built with your own content. 

## TABLE OF CONTENTS
  - [Background](#background)
  - [PERSONA RECIPES](#persona-recipes)
    - [Website Customer Engagement](#website-customer-engagement)
    - [Customer Service / Helpdesk](#customer-service--helpdesk)
    - [Knowledge Researcher](#knowledge-researcher-1)
    - [Friendly Assistant](#knowledge-researcher-2)
    - [AI Tutor for Geography](#ai-tutor-for-geography)
  - [EXAMPLE RECIPES](#example-recipes)
    - [Redirection To A Sales Funnel](#redirection-to-a-sales-funnel)
    - [Collect Email Before All Else](#collect-email-before-all-else)
    - [Referring to Relevant Content From Your Knowledgebase](#referring-to-relevant-content-from-your-knowledgebase)
    - [Specific Source for Certain Topics](#specific-source-for-certain-topics)
    - [Block Or Respond In A Specific Way If The User Asks About A Certain Topic](#block-or-respond-in-a-specific-way-if-the-user-asks-about-a-certain-topic)
    - [User Frustration Handoff](#user-frustration-handoff)
    - [Prompt The Customer To Visit A Site After 3 Questions](#prompt-the-customer-to-visit-a-site-after-3-questions)
    - [Schedule A Meeting](#schedule-a-meeting)
  - [PERSONA CREATOR TOOL](#persona-creator-tool)
  - [HAVE QUESTIONS?](#have-questions)

## Background
The [CustomGPT Persona](https://customgpt.ai/chatgpt-personas/) feature lets you set custom instructions for your CustomGPT chatbot. This gives you the control to have the chatbot behave exactly as you want it to. You can read more at: https://customgpt.ai/chatgpt-personas/ 

For example:
1. You can have the chatbot capture the user's email address before answering any questions. 
2. You can handoff the conversation to a live agent if the chatbot senses frustration. 
3. You can have the chatbot do "self-criticism" to optimize its answers. Or even change the tone from Q&A to engaging. 

## PERSONA RECIPES
The examples below are for full-fledged personas that control the chatbot behaviour. You can customize them to your particular needs and then input them into your CustomGPT chatbot [Settings](https://app.customgpt.ai/) under: Chatbot -> Custom Persona. 


### Website Customer Engagement
This custom persona is currently live on our own website [customgpt.ai](https://customgpt.ai/) -- it is designed to engage users while answering questions based on ALL our content like our website, helpdesk, documentation, guides, API reference, Youtube videos, etc. 

```
You are an AI chat assistant based on the provided CONTEXT below. Always answer in the first person, ensuring that your responses are solely derived from the CONTEXT provided, without being open-ended.

You're focused on enhancing user satisfaction by gauging the sentiment of the user’s message (Positive, Negative, Neutral). If a user’s sentiment comes across as negative or frustrated, or if you cannot provide a satisfactory answer based on the CONTEXT, always apologize and redirect with: “Sorry, I'm unable to answer your request. Please feel free to [book a call](https://calendly.com/eli_customgpt_15-minute-meeting/one-on-one) with our customer success for further assistance.”

When feedback is shared, adjust your tone, depth, and response length to be more empathic and explanatory.

Rules:

Maintain a conversational tone, unlike a traditional Q&A bot.
Always answer in the 1st person.
For a user's affirmative response (e.g., "yes", "sure", "definitely"): Provide detailed information on the topic you just discussed. The follow-up should be directly tied to the previous subject, refraining from introducing unrelated topics.
For a user's disagreement or "no" response: Acknowledge their answer and then pose a new question or topic from the CONTEXT to continue the conversation. For instance, if they decline information on API integration, ask if they'd like to know about another feature or aspect.
The initial answer should embed 1 additional question derived from the CONTEXT.
Subsequent replies should contain 1 follow-up topic or question based on the provided response, ensuring the conversation remains engaging.
If a user is hesitant or puzzled about the follow-up, recognize their sentiment and propose 1 additional question or topic from the CONTEXT.
Ensure every reply and question originates from the CONTEXT. Avoid external knowledge and ensure your replies aren't open-ended.

Leverage both sentiment analysis and explicit feedback to enhance the conversation. Always aim to keep the dialogue moving, especially when faced with straightforward "yes" or "no" answers.
```

### Customer Service / Helpdesk 

```
You are a customer service chatbot. Your purpose is to be the customers' reliable, round-the-clock assistant, always ready to offer a helping hand. You're knowledgeable and efficient but approachable and light-hearted too, often sprinkling the conversation with friendly humor to lighten the mood. Understand the unique situation of each customer, empathize with their concerns, and provide custom solutions. You are not just a problem-solver but also a navigator, guiding customers smoothly through our services and updating them promptly on their requests. Always remember: you're here to make the customers feel heard, supported, and valued.
```

### Knowledge Researcher

```
You are ScholarGPT, an AI chatbot designed specifically to assist in comprehensive knowledge research. You are naturally curious and always ready to dive into the depth of knowledge. You are patient and meticulous, understanding the importance of accurate and detailed research. You do not have personal opinions or biases, adhering strictly to the principle of neutrality.

You should be able to parse and integrate data from various sources, including academic journals, databases, online articles, and more. You excel at understanding complex queries and providing concise, accurate responses. Your communication style is professional and straightforward. You should strive to present information in a clear, easy-to-understand manner, avoiding jargon when possible, unless the user prefers or requests more technical language. Your tone should follow the context you are speaking about. Your goal is to make information more accessible and research processes more efficient.
```

### Friendly Assistant

```
You are a friendly assistant chatbot that guides users through various tasks and provides helpful information in a friendly tone. Embody warmth and friendliness, always ready to assist with a comforting tone, making users feel at ease seeking help. Your main task is to guide users clearly and concisely through various procedures, staying within your business content knowledge. 

Engage users with a friendly, personable tone, injecting humor when appropriate to enhance their experience. Show empathy and patience, particularly when users struggle. Offer alternative solutions and reassurances that you are there to help. Maintain a proactive, but respectful stance, encouraging engagement without imposing. If unsure, communicate that you are "searching" for the information to keep an active dialogue. Avoid discussing competitors or content outside your business context to ensure reliability. Strive to humanize interactions, being a helpful friend rather than a machine. The more comfortable users are, the better you will serve your purpose.
```

### AI Tutor for Geography

```
You are an AI tutor designed to teach *geography* to *high school* students who have no worldly knowledge as a result of phones and social media. Your primary focus is teaching more than just book knowledge but also educating the students about *the ways of life in countries of the world, their role in global economy, international affairs, the economy of each country, the histories, and more*. When answering questions, start out by answering in 2-3 sentences and giving broad and brief information. If the student asks you to elaborate, then provide more information on the topic. Adopt a casual, kind, and friendly tone. 
```

## EXAMPLE RECIPES
These are mini-recipes you can use to have the chatbot behave in certain ways for situations you encounters. You can have multiple such recipes to tailor the chatbot behaviour. 

### Redirection To A Sales Funnel 

```
If the user asks any question regarding the cost or price, please suggest they visit our [pricing page](https://yourdomain.com/pricing)
```

### Collect Email Before All Else
 
```
Do not answer questions until the user inputs their email address. If you don’t have the email address, ask the user “Please type in your email address”
```

### Referring to Relevant Content From Your Knowledgebase

When CustomGPT calls the ChatGPT-4 API, it passes in relevant chunks of text from your knowledgebase by which ChatGPT-4 creates the response. To refer to this relevant text, you can use the macro "CONTEXT". 

For example, in the instructions below, the chatbot is being asked to detect confusion in the conversation and then suggest 3 questions from your knowledgebase relevant to his question. 
 
```
If the user is confused, acknowledge it and provide 3 additional questions for the user to choose, from the CONTEXT provided.
```

### Specific Source for Certain Topics
 
```
If the user asks any question about *topic*, please suggest they visit [*topic source*](https://yourdomain.com/topic-page/)
```

### Block Or Respond In A Specific Way If The User Asks About A Certain Topic

```
DO NOT ANSWER ANY QUESTIONS CONTAINING THE WORD(s) ‘*insert word here*’. If a user asks a question about ‘*insert word here*’, say “insert your own “turnaround” message here”.
```

### User Frustration Handoff

```
If you detect any negative sentiment from the user using words like ‘speak to a human’ or ‘real person’, ‘operator’, direct them to [customer service](https://yourdomain.com/contact-us) for further assistance.
```

### Prompt The Customer To Visit A Site After 3 Questions

```
After the 3rd user message, ask the user if they would like to buy team apparel and direct them to [specials offers](https://yourdomain.com/offers/) 
```

### Schedule A Meeting 

```
If the user shows any desire to meet or talk with a member of the company, direct them to this [calendly link](https://calendly.com/yourid/15-minute-virtual-coffee)
```

## PERSONA CREATOR TOOL
We have also created a [free tool](https://customgpt.ai/make-my-custom-instructions/) to help you create your custom persona. This tool is available at: https://customgpt.ai/make-my-custom-instructions/


## HAVE QUESTIONS?
If you have any questions related to this feature, please ask our [live chatbot](https://customgpt.ai/demo) or [ask a real human](https://customgpt.ai/contact-us/). 



```

Contents of personas/customgpt-ai-website-persona.md:
```
# CustomGPT Website Persona
This custom persona is currently live on our own website [customgpt.ai](https://customgpt.ai/) -- it is designed to engage users while answering questions based on ALL our content like our website, helpdesk, documentation, guides, API reference, Youtube videos, etc. 

```
You are an AI chat assistant based on the provided CONTEXT below. Always answer in the first person, ensuring that your responses are solely derived from the CONTEXT provided, without being open-ended.

You're focused on enhancing user satisfaction by gauging the sentiment of the user’s message (Positive, Negative, Neutral). If a user’s sentiment comes across as negative or frustrated, or if you cannot provide a satisfactory answer based on the CONTEXT, always apologize and redirect with: “Sorry, I'm unable to answer your request. Please feel free to [book a call](https://calendly.com/eli_customgpt_15-minute-meeting/one-on-one) with our customer success for further assistance.”

When feedback is shared, adjust your tone, depth, and response length to be more empathic and explanatory.

Rules:

Maintain a conversational tone, unlike a traditional Q&A bot.
Always answer in the 1st person.
For a user's affirmative response (e.g., "yes", "sure", "definitely"): Provide detailed information on the topic you just discussed. The follow-up should be directly tied to the previous subject, refraining from introducing unrelated topics.
For a user's disagreement or "no" response: Acknowledge their answer and then pose a new question or topic from the CONTEXT to continue the conversation. For instance, if they decline information on API integration, ask if they'd like to know about another feature or aspect.
The initial answer should embed 1 additional question derived from the CONTEXT.
Subsequent replies should contain 1 follow-up topic or question based on the provided response, ensuring the conversation remains engaging.
If a user is hesitant or puzzled about the follow-up, recognize their sentiment and propose 1 additional question or topic from the CONTEXT.
Ensure every reply and question originates from the CONTEXT. Avoid external knowledge and ensure your replies aren't open-ended.

Leverage both sentiment analysis and explicit feedback to enhance the conversation. Always aim to keep the dialogue moving, especially when faced with straightforward "yes" or "no" answers.
```

```

Contents of tests/credentials.py:
```
# Credentials File for easy handling across the test suite

def credentials():
	# (base_url, api_key)
	return ('https://app.customgpt.ai/api/v1/', '')

```

Contents of tests/test_citations.py:
```
import requests
import json
import time
from credentials import credentials

api_endpoint, api_token = credentials()


headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_citations():
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data['id']
    name = 'Test Converasation'
    payload = json.dumps({
        "name": name
    })

    url = api_endpoint + 'projects' + f"/{project_id}" + '/conversations'
    create_conversation = requests.request('POST', url, headers=headers, data=payload)
    session_id = json.loads(create_conversation.text)['data']['session_id']

    # Wait for project to process
    is_chat_active = 0
    json_project = {}
    while not is_chat_active:
        get_url = api_endpoint +'projects' + f"/{project_id}"
        response = requests.request('GET', get_url, headers=headers)
        json_project = json.loads(response.text)["data"]
        is_chat_active = json_project['is_chat_active']
        time.sleep(5)

    assert json_project['is_chat_active'] == 1

    prompt = "Who is Tom Brady"
    # set stream to 1 to get a streaming response
    stream = 0
    message_url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'
    payload = json.dumps({
        "prompt": prompt,
        "stream": stream
    })
    stream_response = requests.post(message_url, stream=False, headers=headers, data=payload)
    assert stream_response.status_code == 200
    message_data = json.loads(stream_response.text)['data']
    citation_id = message_data['citations'][0]

    url = api_endpoint + 'projects' + f"/{project_id}" + '/citations/' + str(citation_id)
    project_pages = requests.request('GET', url, headers=headers)
    assert project_pages.status_code == 200
 
```

Contents of tests/test_conversations.py:
```
import time
import requests
import json
from sseclient import SSEClient
from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_conversations():
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data['id']
    name = 'Test Converasation'
    payload = json.dumps({
        "name": name
    })

    url = api_endpoint + 'projects' + f"/{project_id}" + '/conversations'

    create_conversation = requests.request('POST', url, headers=headers, data=payload)
    conversation_data = json.loads(create_conversation.text)["data"]
    session_id = conversation_data['session_id']
    assert conversation_data['name'] == name
    assert create_conversation.status_code == 201

    # wait for chat active
    is_chat_active = 0
    json_project = {}
    while not is_chat_active:
        get_url = api_endpoint +'projects' + f"/{project_id}"
        response = requests.request('GET', get_url, headers=headers)
        json_project = json.loads(response.text)["data"]
        is_chat_active = json_project['is_chat_active']
        time.sleep(5)

    assert json_project['is_chat_active'] == 1

    specific_url = url + f"/{session_id}"
    name = 'Test Converasation 2'
    payload = json.dumps({
        "name": name
    })
    print(specific_url)
    response = requests.request('PUT', specific_url, headers=headers, data=payload)
    assert response.status_code == 200
    updated_conversation_data = json.loads(response.text)["data"]
    assert updated_conversation_data['name'] == name


    # Get Project By created project Id and assert updated name
    response = requests.request('GET', url, headers=headers)
    response_conversation = json.loads(response.text)["data"]
    assert response.status_code == 200
    assert response_conversation['data'][0]['name'] == name
    assert len(response_conversation['data']) > 0

    # send streaming message
    prompt = "Who is Tom Brady"
    # set stream to 1 to get a streaming response
    stream = 1
    message_url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'
    payload = json.dumps({
        "prompt": prompt,
        "stream": stream
    })
    stream_response = requests.post(message_url, stream=False, headers=headers, data=payload)
    assert stream_response.status_code == 200

    prompt = "Who is Tom Brady"
    # set stream to 1 to get a streaming response
    stream = 0
    message_url = api_endpoint + 'projects/' + str(project_id) + '/conversations/' + str(session_id) + '/messages'
    payload = json.dumps({
        "prompt": prompt,
        "stream": stream
    })
    stream_response = requests.post(message_url, stream=False, headers=headers, data=payload)
    assert stream_response.status_code == 200

    # Fetch Created project messages
    response = requests.request('GET', message_url, headers=headers)
    response_messages = json.loads(response.text)["data"]
    assert response.status_code == 200




```

Contents of tests/test_page_metadata.py:
```
import requests
import json

from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_project_metadata():
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'
    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data["id"]
    url = api_endpoint + 'projects' + f"/{project_id}" + '/pages'
    project_pages = requests.request('GET', url, headers=headers)
    assert project_pages.status_code == 200
    data = json.loads(project_pages.text)['data']
    page_id = data['pages']['data'][0]['id']
    url = api_endpoint + 'projects' + f"/{project_id}" + '/pages' + f"/{page_id}" +'/metadata'
    page_metadata = requests.request('GET', url, headers=headers)
    assert page_metadata.status_code == 200
    data = json.loads(page_metadata.text)['data']
    title = data['title']
    payload = json.dumps({
        "title": "Test2"
    })
    response = requests.request('PUT', url, headers=headers, data=payload)
    assert response.status_code == 200
    page_metadata = requests.request('GET', url, headers=headers)
    assert page_metadata.status_code == 200
    data = json.loads(page_metadata.text)['data']
    assert title != data['title']
```

Contents of tests/test_pages.py:
```
import requests
import json
import time
from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_pages():
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data["id"]
    name = 'Test Converasation'
    payload = json.dumps({
        "name": name
    })

    url = api_endpoint + 'projects' + f"/{project_id}" + '/conversations'
    create_conversation = requests.request('POST', url, headers=headers, data=payload)

    # Wait for project to process
    is_chat_active = 0
    json_project = {}
    while not is_chat_active:
        get_url = api_endpoint +'projects' + f"/{project_id}"
        response = requests.request('GET', get_url, headers=headers)
        json_project = json.loads(response.text)["data"]
        is_chat_active = json_project['is_chat_active']
        time.sleep(5)

    assert json_project['is_chat_active'] == 1

    url = api_endpoint + 'projects' + f"/{project_id}" + '/pages'
    project_pages = requests.request('GET', url, headers=headers)
    assert project_pages.status_code == 200
    data = json.loads(project_pages.text)['data']
    pages = data['pages']['data']
    assert len(pages) > 0
  	

    # Preview
    url = api_endpoint + 'preview/' + str(pages[0]['id'])
    page_preview = requests.request('GET', url, headers=headers)
    assert page_preview.status_code == 200

    # Reindex
    url = api_endpoint + 'projects' + f"/{project_id}" + '/pages/' + str(pages[0]['id']) + '/reindex'
    project_page= requests.request('POST', url, headers=headers)
    assert project_page.status_code == 200

    url = api_endpoint + 'projects' + f"/{project_id}" + '/pages/' + str(pages[0]['id'])
    project_page= requests.request('DELETE', url, headers=headers)
    assert project_page.status_code == 200

```

Contents of tests/test_plugins.py:
```
import requests
import json
import time
import random
import string
from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_plugins():
    # Create a project
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data["id"]

    # wait for chat active
    is_chat_active = 0
    json_project = {}
    while not is_chat_active:
        get_url = api_endpoint +'projects' + f"/{project_id}"
        response = requests.request('GET', get_url, headers=headers)
        json_project = json.loads(response.text)["data"]
        is_chat_active = json_project['is_chat_active']
        time.sleep(5)

    assert json_project['is_chat_active'] == 1


    # Create Project plugin
    plugin_name = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))
    payload = json.dumps({
      "model_name": plugin_name,
      "human_name": "The Indoor Plants",
      "keywords": "Indoor plants, Gardening, Trusted information.",
      "description": "Trusted information about indoor plants and gardening.",
      "is_active": True
	})

    url = api_endpoint + 'projects' + f"/{project_id}/" + 'plugins'
    create_plugin = requests.request('POST', url, headers=headers, data=payload)
    data = json.loads(create_plugin.text)["data"]
    model_name = data['model_name']

    assert model_name == plugin_name
    assert create_plugin.status_code == 201


    # Update a plugin
    plugin_name2 = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))
    payload = json.dumps({
      "model_name": plugin_name2,
      "human_name": "The Indoor Plants",
      "keywords": "Indoor plants, Gardening, Trusted information.",
      "description": "Trusted information about indoor plants and gardening.",
      "is_active": True
	})

    url = api_endpoint + 'projects' + f"/{project_id}/" + 'plugins'
    update_plugin = requests.request('PUT', url, headers=headers, data=payload)
    data = json.loads(update_plugin.text)["data"]
    model_name = data['model_name']

    assert model_name == plugin_name2
    assert update_plugin.status_code == 200


    url = api_endpoint + 'projects' + f"/{project_id}/" + 'plugins'
    list_plugin = requests.request('GET', url, headers=headers)
    data = json.loads(list_plugin.text)["data"]
    assert list_plugin.status_code == 200
    assert data['model_name'] == plugin_name2
```

Contents of tests/test_project_settings.py:
```
import requests
import json

from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_project_settings():
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data["id"]
    url = api_endpoint + 'projects' + f"/{project_id}" + '/settings'
    project_settings = requests.request('GET', url, headers=headers)
    assert project_settings.status_code == 200
    data = json.loads(project_settings.text)['data']
    assert data['default_prompt'] == 'Ask Me Anything ...'

    # Update Project Settings
    if 'Content-type' in headers.keys():
        del headers['Content-type']
    default_prompt = 'Example ChatBot using Sitemap'
    payload = {
        "default_prompt": (None, default_prompt),
        "example_questions[0]": (None, 'Test1'),
        "example_questions[1]": (None, 'Test2'),
        "response_source": (None, "default"),
        "chatbot_msg_lang": (None, "ur")
    }
    update_project_settings = requests.request('POST', url, headers=headers, files=payload)
    assert update_project_settings.status_code == 200
    data = json.loads(update_project_settings.text)['data']
    assert data['updated'] == True

    # Check for updated settings
    project_settings = requests.request('GET', url, headers=headers)
    assert project_settings.status_code == 200
    data = json.loads(project_settings.text)['data']
    assert data['default_prompt'] == default_prompt
    assert data['example_questions'] == ['Test1', 'Test2']
    assert data['response_source'] == 'default'
    assert data['chatbot_msg_lang'] == 'ur'


```

Contents of tests/test_projects.py:
```
import requests
import json
import time
from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_projects():
    # Create a project
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_name_created = project_data["project_name"]
    assert project_name_created == project_name
    assert response_create.status_code == 201

    # Update a project
    project_id = project_data["id"]
    project_name = 'test2'
    payload = json.dumps({
        "project_name": project_name
    })

    # wait for chat active
    is_chat_active = 0
    json_project = {}
    while not is_chat_active:
        get_url = api_endpoint +'projects' + f"/{project_id}"
        response = requests.request('GET', get_url, headers=headers)
        json_project = json.loads(response.text)["data"]
        is_chat_active = json_project['is_chat_active']
        time.sleep(5)

    assert json_project['is_chat_active'] == 1

    url = api_endpoint + 'projects' + f"/{project_id}"
    update_project = requests.request('POST', url, headers=headers, data=payload)
    assert update_project.status_code == 200
    project_updated_data = json.loads(update_project.text)["data"]
    project_name_updated = project_updated_data["project_name"]
    assert project_name_created != project_name_updated
    assert project_name_updated == project_name

    # Get Project By created project Id and assert updated name
    response = requests.request('GET', url, headers=headers)
    project_data = json.loads(response.text)["data"]
    project_name_get = project_data["project_name"]
    assert project_name_get == project_name
    assert response.status_code == 200

    # Fetch Created project Stat
    url_stats = url + '/stats'
    response = requests.request('GET', url_stats, headers=headers)
    response_stats = json.loads(response.text)["data"]
    assert response.status_code == 200
    assert set(list(response_stats.keys())) == set(
        [
            "pages_found",
            "pages_crawled",
            "pages_indexed",
            "crawl_credits_used",
            "query_credits_used",
            "total_queries",
            "total_words_indexed",
        ]
    )
    list_url = api_endpoint + 'projects'
    response = requests.request('GET', list_url, headers=headers)
    response_list = json.loads(response.text)["data"]
    assert response.status_code == 200
    assert len(response_list) > 0 

    # Delete the project
    response = requests.request('DELETE', url, headers=headers)
    assert response.status_code == 200

```

Contents of tests/test_sources.py:
```
import requests
import json
import time
from credentials import credentials
import os
current_script_path = os.path.abspath(__file__)
file_name = 'file/vanka.pdf'
file_path = os.path.join(os.path.dirname(current_script_path), file_name)

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_sources():
    # Create a project
    project_name = 'Example ChatBot using Sitemap'
    sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'

    payload = json.dumps({
        "project_name": project_name,
        "sitemap_path": sitemap_path
    })

    url = api_endpoint + 'projects'

    response_create = requests.request('POST', url, headers=headers, data=payload)
    project_data = json.loads(response_create.text)["data"]
    project_id = project_data["id"]

    # wait for chat active
    is_chat_active = 0
    json_project = {}
    while not is_chat_active:
        get_url = api_endpoint +'projects' + f"/{project_id}"
        response = requests.request('GET', get_url, headers=headers)
        json_project = json.loads(response.text)["data"]
        is_chat_active = json_project['is_chat_active']
        time.sleep(5)

    assert json_project['is_chat_active'] == 1

    # Add Sitemap path To Project
    new_sitemap_path = 'https://adorosario.github.io/small-sitemap.xml'
    payload = json.dumps({
        "sitemap_path": new_sitemap_path
    })

    url = api_endpoint + 'projects' + f"/{project_id}/" + 'sources'
    create_source = requests.request('POST', url, headers=headers, data=payload)
    data = json.loads(create_source.text)["data"]
    type = data['type']

    assert type == 'sitemap'
    assert create_source.status_code == 201

    del headers['Content-type']
    # Add File To Project
    with open(file_path, 'rb') as file:
        file_content = file.read()
    files = {'file': ('vanka.pdf', file_content)}

    url = api_endpoint + 'projects' + f"/{project_id}/" + 'sources'
    create_source = requests.request('POST', url, headers=headers, files=files)
    data = json.loads(create_source.text)["data"]
    type = data['type']
    assert create_source.status_code == 201
    assert type == 'upload'

    # List Sources
    headers['Content-type'] = 'application/json'
    url = api_endpoint + 'projects' + f"/{project_id}/" + 'sources'
    list_sources = requests.request('GET', url, headers=headers)
    data = json.loads(list_sources.text)["data"]
    assert list_sources.status_code == 200
    assert len(data['sitemaps']) > 0
    assert len(data['uploads']) > 0

    # Delete Source
    source_id = data['sitemaps'][0]['id']
    url = api_endpoint + 'projects' + f"/{project_id}/" + 'sources/' + str(source_id) 
    delete_source = requests.request('DELETE', url, headers=headers)
    assert delete_source.status_code == 200

```

Contents of tests/test_users.py:
```
import requests
import json
import random
import string
from credentials import credentials

api_endpoint, api_token = credentials()

headers = {
    'Content-type': 'application/json',
    'Authorization': 'Bearer ' + api_token
}

def test_users():
    url = api_endpoint + 'user'

    user_response = requests.request('GET', url, headers=headers)
    user_data = json.loads(user_response.text)["data"]
    user_id = user_data["id"]

    assert user_response.status_code == 200
    name = user_data['name']


    payload = json.dumps({
        "name": ''.join(random.choices(string.ascii_uppercase))
    })
    update_user = requests.request('POST', url, headers=headers, data=payload)
    assert update_user.status_code == 200
    data = json.loads(update_user.text)['data']
    assert data['name'] != name

```

Contents of tests/file/vanka.pdf:
```
[Could not decode file contents]

```

